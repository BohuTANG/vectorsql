//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	return yylex.(*Tokenizer).nesting == 200
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                              int
	tableValuedFunctionArguments     TableValuedFunctionArguments
	tableValuedFunctionArgument      *TableValuedFunctionArgument
	tableValuedFunctionArgumentValue TableValuedFunctionArgumentValue
	empty                            struct{}
	statement                        Statement
	selStmt                          SelectStatement
	ddl                              *DDL
	ins                              *Insert
	byt                              byte
	bytes                            []byte
	bytes2                           [][]byte
	str                              string
	strs                             []string
	selectExprs                      SelectExprs
	selectExpr                       SelectExpr
	columns                          Columns
	partitions                       Partitions
	colName                          *ColName
	tableExprs                       TableExprs
	tableExpr                        TableExpr
	tableOption                      *TableOption
	databaseOption                   *DatabaseOption
	joinCondition                    JoinCondition
	tableName                        TableName
	tableNames                       TableNames
	indexHints                       *IndexHints
	expr                             Expr
	exprs                            Exprs
	boolVal                          BoolVal
	sqlVal                           *SQLVal
	colTuple                         ColTuple
	values                           Values
	valTuple                         ValTuple
	subquery                         *Subquery
	whens                            []*When
	when                             *When
	orderBy                          OrderBy
	order                            *Order
	limit                            *Limit
	updateExprs                      UpdateExprs
	setExprs                         SetExprs
	updateExpr                       *UpdateExpr
	setExpr                          *SetExpr
	colIdent                         ColIdent
	tableIdent                       TableIdent
	convertType                      *ConvertType
	aliasedTableName                 *AliasedTableExpr
	TableSpec                        *TableSpec
	columnType                       ColumnType
	colKeyOpt                        ColumnKeyOption
	optVal                           Expr
	LengthScaleOption                LengthScaleOption
	columnDefinition                 *ColumnDefinition
	indexDefinition                  *IndexDefinition
	indexInfo                        *IndexInfo
	indexOption                      *IndexOption
	indexOptions                     []*IndexOption
	indexColumn                      *IndexColumn
	indexColumns                     []*IndexColumn
	constraintDefinition             *ConstraintDefinition
	constraintInfo                   ConstraintInfo
	ReferenceAction                  ReferenceAction
	partDefs                         []*PartitionDefinition
	partDef                          *PartitionDefinition
	partSpec                         *PartitionSpec
	vindexParam                      VindexParam
	vindexParams                     []VindexParam
	showFilter                       *ShowFilter
	optLike                          *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const VALUES = 57376
const LAST_INSERT_ID = 57377
const NEXT = 57378
const VALUE = 57379
const SHARE = 57380
const MODE = 57381
const SQL_NO_CACHE = 57382
const SQL_CACHE = 57383
const JOIN = 57384
const STRAIGHT_JOIN = 57385
const LEFT = 57386
const RIGHT = 57387
const INNER = 57388
const OUTER = 57389
const CROSS = 57390
const NATURAL = 57391
const USE = 57392
const FORCE = 57393
const ON = 57394
const USING = 57395
const ID = 57396
const HEX = 57397
const STRING = 57398
const INTEGRAL = 57399
const FLOAT = 57400
const HEXNUM = 57401
const VALUE_ARG = 57402
const LIST_ARG = 57403
const COMMENT = 57404
const COMMENT_KEYWORD = 57405
const BIT_LITERAL = 57406
const NULL = 57407
const TRUE = 57408
const FALSE = 57409
const OFF = 57410
const OR = 57411
const AND = 57412
const NOT = 57413
const BETWEEN = 57414
const CASE = 57415
const WHEN = 57416
const THEN = 57417
const ELSE = 57418
const END = 57419
const LE = 57420
const GE = 57421
const NE = 57422
const NULL_SAFE_EQUAL = 57423
const IS = 57424
const LIKE = 57425
const REGEXP = 57426
const IN = 57427
const SHIFT_LEFT = 57428
const SHIFT_RIGHT = 57429
const DIV = 57430
const MOD = 57431
const UNARY = 57432
const COLLATE = 57433
const BINARY = 57434
const UNDERSCORE_BINARY = 57435
const UNDERSCORE_UTF8MB4 = 57436
const INTERVAL = 57437
const JSON_EXTRACT_OP = 57438
const JSON_UNQUOTE_EXTRACT_OP = 57439
const CREATE = 57440
const ALTER = 57441
const DROP = 57442
const RENAME = 57443
const ANALYZE = 57444
const ADD = 57445
const FLUSH = 57446
const SCHEMA = 57447
const TABLE = 57448
const DESCRIPTOR = 57449
const INDEX = 57450
const VIEW = 57451
const TO = 57452
const IGNORE = 57453
const IF = 57454
const UNIQUE = 57455
const PRIMARY = 57456
const COLUMN = 57457
const SPATIAL = 57458
const FULLTEXT = 57459
const KEY_BLOCK_SIZE = 57460
const CHECK = 57461
const ACTION = 57462
const CASCADE = 57463
const CONSTRAINT = 57464
const FOREIGN = 57465
const NO = 57466
const REFERENCES = 57467
const RESTRICT = 57468
const SHOW = 57469
const DESCRIBE = 57470
const EXPLAIN = 57471
const DATE = 57472
const ESCAPE = 57473
const REPAIR = 57474
const OPTIMIZE = 57475
const TRUNCATE = 57476
const MAXVALUE = 57477
const PARTITION = 57478
const REORGANIZE = 57479
const LESS = 57480
const THAN = 57481
const PROCEDURE = 57482
const TRIGGER = 57483
const VINDEX = 57484
const VINDEXES = 57485
const STATUS = 57486
const VARIABLES = 57487
const WARNINGS = 57488
const SEQUENCE = 57489
const BEGIN = 57490
const START = 57491
const TRANSACTION = 57492
const COMMIT = 57493
const ROLLBACK = 57494
const BIT = 57495
const TINYINT = 57496
const SMALLINT = 57497
const MEDIUMINT = 57498
const INT = 57499
const INTEGER = 57500
const BIGINT = 57501
const INTNUM = 57502
const REAL = 57503
const DOUBLE = 57504
const FLOAT_TYPE = 57505
const DECIMAL = 57506
const NUMERIC = 57507
const TIME = 57508
const TIMESTAMP = 57509
const DATETIME = 57510
const YEAR = 57511
const CHAR = 57512
const VARCHAR = 57513
const BOOL = 57514
const CHARACTER = 57515
const VARBINARY = 57516
const NCHAR = 57517
const TEXT = 57518
const TINYTEXT = 57519
const MEDIUMTEXT = 57520
const LONGTEXT = 57521
const BLOB = 57522
const TINYBLOB = 57523
const MEDIUMBLOB = 57524
const LONGBLOB = 57525
const JSON = 57526
const ENUM = 57527
const GEOMETRY = 57528
const POINT = 57529
const LINESTRING = 57530
const POLYGON = 57531
const GEOMETRYCOLLECTION = 57532
const MULTIPOINT = 57533
const MULTILINESTRING = 57534
const MULTIPOLYGON = 57535
const INT8 = 57536
const INT16 = 57537
const INT32 = 57538
const INT64 = 57539
const UINT8 = 57540
const UINT16 = 57541
const UINT32 = 57542
const UINT64 = 57543
const FLOAT32 = 57544
const FLOAT64 = 57545
const ENUM8 = 57546
const ENUM16 = 57547
const NULLABLE = 57548
const UUID = 57549
const NULLX = 57550
const AUTO_INCREMENT = 57551
const APPROXNUM = 57552
const SIGNED = 57553
const UNSIGNED = 57554
const ZEROFILL = 57555
const COLLATION = 57556
const DATABASES = 57557
const TABLES = 57558
const VITESS_METADATA = 57559
const VSCHEMA = 57560
const FULL = 57561
const PROCESSLIST = 57562
const COLUMNS = 57563
const FIELDS = 57564
const ENGINES = 57565
const ENGINE = 57566
const PLUGINS = 57567
const NAMES = 57568
const CHARSET = 57569
const GLOBAL = 57570
const SESSION = 57571
const ISOLATION = 57572
const LEVEL = 57573
const READ = 57574
const WRITE = 57575
const ONLY = 57576
const REPEATABLE = 57577
const COMMITTED = 57578
const UNCOMMITTED = 57579
const SERIALIZABLE = 57580
const CURRENT_TIMESTAMP = 57581
const DATABASE = 57582
const CURRENT_DATE = 57583
const CURRENT_TIME = 57584
const LOCALTIME = 57585
const LOCALTIMESTAMP = 57586
const UTC_DATE = 57587
const UTC_TIME = 57588
const UTC_TIMESTAMP = 57589
const REPLACE = 57590
const CONVERT = 57591
const CAST = 57592
const SUBSTR = 57593
const SUBSTRING = 57594
const GROUP_CONCAT = 57595
const SEPARATOR = 57596
const TIMESTAMPADD = 57597
const TIMESTAMPDIFF = 57598
const MATCH = 57599
const AGAINST = 57600
const BOOLEAN = 57601
const LANGUAGE = 57602
const WITH = 57603
const QUERY = 57604
const EXPANSION = 57605
const UNUSED = 57606
const ARRAY = 57607
const CUME_DIST = 57608
const DESCRIPTION = 57609
const DENSE_RANK = 57610
const EMPTY = 57611
const EXCEPT = 57612
const FIRST_VALUE = 57613
const GROUPING = 57614
const GROUPS = 57615
const JSON_TABLE = 57616
const LAG = 57617
const LAST_VALUE = 57618
const LATERAL = 57619
const LEAD = 57620
const MEMBER = 57621
const NTH_VALUE = 57622
const NTILE = 57623
const OF = 57624
const OVER = 57625
const PERCENT_RANK = 57626
const RANK = 57627
const RECURSIVE = 57628
const ROW_NUMBER = 57629
const SYSTEM = 57630
const WINDOW = 57631
const ACTIVE = 57632
const ADMIN = 57633
const BUCKETS = 57634
const CLONE = 57635
const COMPONENT = 57636
const DEFINITION = 57637
const ENFORCED = 57638
const EXCLUDE = 57639
const FOLLOWING = 57640
const GEOMCOLLECTION = 57641
const GET_MASTER_PUBLIC_KEY = 57642
const HISTOGRAM = 57643
const HISTORY = 57644
const INACTIVE = 57645
const INVISIBLE = 57646
const LOCKED = 57647
const MASTER_COMPRESSION_ALGORITHMS = 57648
const MASTER_PUBLIC_KEY_PATH = 57649
const MASTER_TLS_CIPHERSUITES = 57650
const MASTER_ZSTD_COMPRESSION_LEVEL = 57651
const NESTED = 57652
const NETWORK_NAMESPACE = 57653
const NOWAIT = 57654
const NULLS = 57655
const OJ = 57656
const OLD = 57657
const OPTIONAL = 57658
const ORDINALITY = 57659
const ORGANIZATION = 57660
const OTHERS = 57661
const PATH = 57662
const PERSIST = 57663
const PERSIST_ONLY = 57664
const PRECEDING = 57665
const PRIVILEGE_CHECKS_USER = 57666
const PROCESS = 57667
const RANDOM = 57668
const REFERENCE = 57669
const REQUIRE_ROW_FORMAT = 57670
const RESOURCE = 57671
const RESPECT = 57672
const RESTART = 57673
const RETAIN = 57674
const REUSE = 57675
const ROLE = 57676
const SECONDARY = 57677
const SECONDARY_ENGINE = 57678
const SECONDARY_LOAD = 57679
const SECONDARY_UNLOAD = 57680
const SKIP = 57681
const SRID = 57682
const THREAD_PRIORITY = 57683
const TIES = 57684
const UNBOUNDED = 57685
const VCPU = 57686
const VISIBLE = 57687

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"DESCRIPTOR",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT8",
	"INT16",
	"INT32",
	"INT64",
	"UINT8",
	"UINT16",
	"UINT32",
	"UINT64",
	"FLOAT32",
	"FLOAT64",
	"ENUM8",
	"ENUM16",
	"NULLABLE",
	"UUID",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"ENGINE",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 29,
	-2, 4,
	-1, 37,
	161, 314,
	162, 314,
	-2, 302,
	-1, 320,
	112, 664,
	-2, 660,
	-1, 321,
	112, 665,
	-2, 661,
	-1, 389,
	82, 912,
	-2, 63,
	-1, 390,
	82, 830,
	-2, 64,
	-1, 395,
	82, 799,
	-2, 626,
	-1, 397,
	82, 860,
	-2, 628,
	-1, 689,
	1, 366,
	5, 366,
	12, 366,
	13, 366,
	14, 366,
	15, 366,
	17, 366,
	19, 366,
	30, 366,
	31, 366,
	42, 366,
	43, 366,
	44, 366,
	45, 366,
	46, 366,
	48, 366,
	49, 366,
	52, 366,
	53, 366,
	55, 366,
	56, 366,
	363, 366,
	-2, 394,
	-1, 693,
	53, 44,
	55, 44,
	-2, 48,
	-1, 855,
	112, 667,
	-2, 663,
	-1, 1087,
	5, 30,
	-2, 461,
	-1, 1117,
	5, 29,
	-2, 600,
	-1, 1379,
	5, 30,
	-2, 601,
	-1, 1439,
	5, 29,
	-2, 603,
	-1, 1524,
	5, 30,
	-2, 604,
}

const yyPrivate = 57344

const yyLast = 17248

var yyAct = [...]int{

	321, 1558, 1548, 1341, 1220, 1120, 645, 1512, 1307, 325,
	1404, 1419, 1455, 644, 3, 338, 1145, 548, 1272, 299,
	942, 1140, 1312, 685, 1273, 1121, 937, 1269, 1279, 965,
	1051, 1170, 81, 1285, 939, 57, 264, 974, 804, 264,
	890, 1079, 351, 880, 818, 1199, 978, 1011, 887, 1244,
	1187, 394, 706, 908, 928, 290, 857, 577, 383, 583,
	1007, 944, 705, 517, 1151, 298, 388, 264, 81, 589,
	323, 308, 264, 597, 264, 380, 921, 385, 695, 659,
	56, 692, 61, 1551, 1033, 391, 1535, 1546, 1522, 1543,
	1342, 1534, 1521, 1261, 1371, 522, 1304, 660, 1032, 959,
	291, 292, 293, 294, 312, 686, 297, 1020, 63, 64,
	65, 66, 67, 535, 327, 259, 255, 261, 256, 257,
	995, 1305, 1306, 968, 550, 363, 1037, 369, 370, 367,
	368, 366, 365, 364, 1160, 1031, 571, 1159, 960, 961,
	1161, 371, 372, 707, 296, 708, 566, 251, 382, 253,
	567, 564, 565, 519, 295, 521, 274, 1486, 610, 609,
	619, 620, 612, 613, 614, 615, 616, 617, 618, 611,
	1178, 988, 621, 1222, 1407, 984, 1426, 996, 1362, 1360,
	284, 985, 289, 559, 560, 1028, 1025, 1026, 913, 1024,
	552, 793, 569, 554, 792, 1224, 610, 609, 619, 620,
	612, 613, 614, 615, 616, 617, 618, 611, 889, 570,
	621, 352, 51, 790, 1545, 1542, 1513, 1219, 1505, 1245,
	981, 979, 1035, 1038, 551, 553, 922, 1566, 1456, 536,
	791, 267, 794, 1562, 524, 1225, 1146, 1148, 270, 797,
	1223, 1458, 253, 783, 527, 1299, 278, 1298, 273, 518,
	258, 1080, 264, 1297, 520, 264, 252, 266, 1247, 1030,
	254, 264, 1493, 51, 981, 981, 1045, 264, 1382, 1044,
	81, 304, 81, 1464, 81, 81, 1231, 81, 1216, 81,
	276, 1156, 1096, 1106, 1218, 81, 283, 633, 634, 1073,
	829, 701, 1249, 1171, 1253, 1029, 1248, 1207, 1246, 601,
	542, 966, 621, 1251, 1093, 1324, 955, 826, 611, 996,
	1457, 621, 1250, 268, 1147, 81, 518, 980, 586, 1520,
	823, 596, 977, 975, 549, 976, 1205, 532, 70, 819,
	986, 973, 979, 528, 1053, 1034, 534, 594, 585, 1252,
	1254, 1560, 541, 1487, 1561, 1503, 1559, 1475, 543, 516,
	1036, 573, 574, 596, 280, 271, 1325, 281, 282, 287,
	1283, 980, 980, 272, 71, 275, 1197, 269, 286, 285,
	1164, 538, 539, 540, 709, 1465, 1463, 1263, 264, 264,
	264, 1217, 864, 1215, 633, 634, 1374, 81, 587, 1092,
	529, 909, 530, 81, 1206, 531, 862, 863, 861, 1211,
	1208, 1201, 1209, 1204, 391, 1200, 633, 634, 1202, 1203,
	820, 785, 1052, 684, 523, 614, 615, 616, 617, 618,
	611, 1176, 1210, 621, 610, 609, 619, 620, 612, 613,
	614, 615, 616, 617, 618, 611, 1508, 631, 621, 595,
	594, 909, 989, 1103, 662, 664, 666, 668, 670, 672,
	673, 847, 849, 850, 591, 694, 596, 848, 1526, 683,
	699, 693, 663, 665, 703, 669, 671, 576, 674, 609,
	619, 620, 612, 613, 614, 615, 616, 617, 618, 611,
	1415, 547, 621, 547, 54, 547, 547, 575, 547, 1501,
	547, 525, 526, 689, 860, 1414, 547, 1070, 1071, 1072,
	1193, 1091, 1567, 1090, 610, 609, 619, 620, 612, 613,
	614, 615, 616, 617, 618, 611, 51, 264, 621, 1192,
	595, 594, 81, 595, 594, 595, 594, 264, 264, 81,
	1265, 630, 1179, 264, 632, 22, 264, 596, 250, 264,
	596, 1568, 596, 264, 1528, 81, 81, 1368, 832, 833,
	81, 81, 81, 264, 81, 81, 881, 1162, 882, 1163,
	81, 81, 643, 1504, 647, 648, 649, 650, 651, 652,
	653, 654, 655, 1433, 658, 661, 661, 661, 667, 661,
	661, 667, 661, 675, 676, 677, 678, 679, 680, 81,
	690, 1410, 1228, 264, 806, 303, 595, 594, 717, 81,
	828, 1188, 1056, 377, 378, 834, 1461, 1544, 787, 788,
	1344, 798, 1171, 596, 795, 1530, 576, 382, 1166, 854,
	801, 610, 609, 619, 620, 612, 613, 614, 615, 616,
	617, 618, 611, 883, 812, 621, 803, 827, 1461, 1516,
	853, 1461, 576, 81, 1461, 1494, 576, 858, 1461, 1460,
	1402, 1401, 1499, 855, 595, 594, 1384, 576, 1472, 836,
	802, 894, 899, 902, 1381, 576, 1333, 1332, 910, 786,
	318, 596, 851, 784, 843, 781, 81, 81, 1327, 1330,
	1327, 1329, 1471, 264, 1321, 341, 340, 343, 344, 345,
	346, 264, 544, 264, 342, 347, 264, 264, 1327, 1328,
	264, 264, 264, 81, 884, 885, 930, 933, 934, 935,
	931, 350, 932, 936, 1327, 1326, 1286, 1287, 537, 859,
	391, 1085, 576, 925, 576, 906, 982, 918, 892, 576,
	950, 716, 715, 547, 952, 1270, 58, 1282, 1282, 697,
	547, 892, 1152, 79, 612, 613, 614, 615, 616, 617,
	618, 611, 1234, 806, 621, 1377, 547, 547, 24, 953,
	24, 547, 547, 547, 923, 547, 547, 957, 1152, 956,
	948, 547, 547, 697, 924, 835, 1085, 1474, 951, 393,
	969, 698, 1115, 700, 264, 925, 1116, 81, 1438, 925,
	24, 264, 264, 264, 264, 264, 1085, 264, 264, 925,
	1331, 264, 81, 1294, 958, 689, 54, 305, 54, 54,
	689, 1282, 1109, 1108, 689, 698, 1085, 696, 264, 696,
	264, 264, 949, 702, 696, 264, 1013, 1014, 1015, 830,
	796, 1536, 1421, 891, 893, 990, 1009, 1010, 54, 930,
	933, 934, 935, 931, 51, 932, 936, 854, 1400, 1389,
	1012, 997, 998, 999, 1317, 54, 1165, 895, 896, 647,
	1008, 901, 904, 905, 1003, 1018, 1286, 1287, 1061, 1002,
	1001, 1000, 1039, 1040, 1041, 1042, 1043, 1221, 1046, 1047,
	1422, 855, 1048, 1017, 1553, 1549, 917, 1319, 919, 920,
	1062, 1289, 1063, 1270, 930, 933, 934, 935, 931, 1050,
	932, 936, 940, 941, 858, 1194, 1057, 690, 576, 824,
	800, 690, 842, 1292, 1132, 1130, 1291, 1129, 1075, 1133,
	1131, 1134, 1128, 934, 935, 1373, 264, 264, 264, 264,
	264, 309, 310, 1540, 1122, 1117, 1533, 1230, 264, 1058,
	590, 264, 1538, 1068, 1067, 578, 264, 1183, 714, 1123,
	264, 545, 1126, 1175, 894, 588, 1510, 579, 1509, 1436,
	1173, 1102, 1167, 610, 609, 619, 620, 612, 613, 614,
	615, 616, 617, 618, 611, 1375, 859, 621, 1417, 1021,
	799, 393, 938, 393, 1153, 393, 393, 590, 393, 1066,
	393, 1135, 306, 307, 300, 1480, 393, 1065, 547, 635,
	636, 637, 638, 639, 640, 641, 642, 1150, 301, 58,
	1172, 1157, 1479, 547, 1424, 1154, 1152, 1155, 81, 81,
	568, 1555, 1554, 1168, 1169, 1182, 599, 1184, 1185, 1186,
	1097, 1094, 1124, 1125, 817, 1127, 592, 1555, 1490, 1408,
	689, 689, 689, 689, 689, 825, 60, 62, 55, 81,
	1069, 314, 1189, 1190, 1191, 689, 1, 1547, 1343, 1418,
	1027, 1511, 1454, 1311, 689, 264, 1074, 972, 69, 515,
	68, 1212, 1082, 1502, 81, 971, 1083, 970, 1462, 1198,
	1406, 983, 1177, 1087, 1088, 1089, 987, 1318, 1174, 1507,
	1095, 1236, 722, 1098, 1099, 1227, 720, 1084, 393, 1105,
	721, 719, 724, 1107, 711, 723, 1110, 1111, 1112, 1113,
	718, 277, 1180, 1181, 386, 1100, 710, 1016, 1238, 81,
	81, 1271, 593, 1237, 1266, 1122, 1243, 72, 1137, 1214,
	1213, 1023, 1276, 1118, 1119, 1255, 1262, 690, 690, 690,
	690, 690, 1256, 822, 562, 1061, 1232, 563, 279, 629,
	81, 1064, 940, 1158, 392, 1149, 1277, 831, 855, 1274,
	1290, 690, 582, 1478, 1423, 81, 81, 1101, 991, 992,
	993, 994, 656, 907, 326, 846, 339, 336, 1300, 337,
	837, 1114, 1308, 603, 324, 1281, 316, 1301, 1004, 1005,
	1006, 688, 681, 929, 927, 264, 926, 381, 81, 1141,
	1315, 1316, 1138, 1139, 1314, 1288, 1335, 1284, 1019, 967,
	1322, 1323, 687, 1233, 264, 1308, 1370, 1485, 1303, 841,
	81, 26, 59, 81, 81, 81, 264, 311, 19, 18,
	547, 17, 81, 393, 20, 264, 16, 15, 14, 533,
	393, 30, 21, 13, 12, 11, 10, 9, 8, 1236,
	7, 6, 5, 4, 302, 1336, 393, 393, 1349, 23,
	547, 393, 393, 393, 2, 393, 393, 0, 1337, 1351,
	1339, 393, 393, 1242, 856, 0, 1334, 865, 866, 867,
	868, 869, 870, 871, 872, 873, 874, 875, 876, 877,
	878, 879, 1122, 546, 0, 1338, 264, 1358, 1350, 1376,
	838, 0, 0, 0, 0, 0, 1394, 1348, 1386, 0,
	599, 0, 0, 393, 0, 0, 1392, 1385, 81, 1393,
	1391, 1399, 0, 0, 0, 0, 0, 1293, 1275, 0,
	51, 0, 914, 0, 0, 81, 0, 0, 0, 0,
	0, 0, 0, 81, 0, 0, 0, 0, 0, 689,
	0, 0, 580, 584, 886, 1295, 1296, 0, 0, 0,
	1420, 0, 0, 0, 0, 0, 0, 0, 0, 602,
	911, 0, 619, 620, 612, 613, 614, 615, 616, 617,
	618, 611, 81, 81, 621, 81, 0, 915, 916, 0,
	81, 0, 264, 0, 1439, 0, 81, 81, 81, 264,
	1445, 81, 1437, 81, 646, 1444, 1449, 1450, 1451, 1453,
	689, 0, 0, 657, 393, 0, 0, 0, 1308, 1452,
	1274, 0, 81, 264, 1466, 1459, 1352, 0, 0, 0,
	0, 0, 1476, 1354, 0, 0, 0, 0, 0, 1467,
	0, 1468, 1469, 1470, 1363, 1364, 690, 1409, 0, 1411,
	1412, 1413, 0, 0, 1492, 0, 0, 1491, 0, 0,
	0, 0, 81, 0, 1378, 1379, 1380, 1500, 1383, 1498,
	0, 0, 0, 1369, 0, 81, 81, 1425, 0, 0,
	0, 1274, 0, 0, 1515, 0, 1514, 1518, 581, 1398,
	0, 0, 1420, 1308, 81, 0, 1523, 0, 393, 0,
	1122, 0, 0, 0, 1477, 0, 264, 690, 0, 1395,
	1396, 1397, 0, 393, 81, 0, 0, 0, 0, 1367,
	0, 1532, 0, 0, 262, 0, 0, 288, 0, 0,
	0, 0, 0, 1076, 1077, 1078, 1539, 81, 1537, 0,
	0, 393, 0, 0, 0, 0, 547, 1541, 0, 0,
	1552, 0, 315, 0, 0, 384, 0, 1563, 0, 1432,
	262, 0, 262, 0, 0, 555, 0, 556, 557, 0,
	558, 0, 561, 0, 0, 0, 0, 0, 572, 0,
	0, 0, 1447, 1448, 0, 0, 0, 1527, 0, 1275,
	0, 0, 1440, 610, 609, 619, 620, 612, 613, 614,
	615, 616, 617, 618, 611, 0, 0, 621, 0, 0,
	0, 0, 0, 0, 0, 0, 1481, 1482, 1483, 1484,
	821, 0, 0, 1488, 1489, 0, 0, 0, 0, 1473,
	0, 0, 0, 0, 0, 0, 911, 1366, 1495, 1496,
	1497, 0, 0, 0, 0, 0, 844, 845, 0, 0,
	1275, 0, 51, 0, 0, 0, 0, 0, 0, 0,
	0, 24, 25, 52, 27, 28, 0, 0, 0, 0,
	0, 0, 0, 0, 1519, 0, 0, 0, 0, 0,
	43, 1524, 0, 0, 0, 29, 48, 49, 1355, 1356,
	0, 1357, 0, 0, 1359, 0, 1361, 0, 0, 646,
	1529, 0, 897, 898, 0, 38, 0, 0, 0, 54,
	0, 610, 609, 619, 620, 612, 613, 614, 615, 616,
	617, 618, 611, 0, 0, 621, 0, 0, 0, 1195,
	393, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	262, 0, 0, 262, 0, 1564, 1565, 0, 0, 262,
	0, 1240, 1241, 0, 0, 262, 1403, 1550, 0, 0,
	393, 964, 0, 0, 1257, 1258, 0, 1259, 1260, 0,
	31, 32, 34, 33, 36, 0, 50, 0, 0, 1267,
	1268, 0, 0, 0, 0, 393, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 37,
	44, 45, 0, 0, 46, 47, 35, 0, 0, 1365,
	0, 0, 0, 0, 0, 782, 0, 0, 393, 0,
	39, 40, 789, 41, 42, 0, 0, 911, 0, 0,
	1278, 1280, 0, 0, 0, 0, 0, 0, 807, 808,
	0, 0, 0, 809, 810, 811, 1320, 813, 814, 0,
	0, 0, 0, 815, 816, 0, 0, 0, 0, 0,
	0, 1280, 0, 0, 0, 0, 262, 262, 262, 0,
	0, 0, 0, 0, 0, 0, 393, 1313, 0, 1059,
	1060, 0, 584, 610, 609, 619, 620, 612, 613, 614,
	615, 616, 617, 618, 611, 0, 0, 621, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 393,
	1353, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	53, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1340, 0, 0, 1345, 1346, 1347, 0, 0, 0,
	0, 0, 0, 393, 1086, 0, 605, 0, 608, 0,
	0, 0, 0, 0, 622, 623, 624, 625, 626, 627,
	628, 1104, 606, 607, 604, 610, 609, 619, 620, 612,
	613, 614, 615, 616, 617, 618, 611, 0, 0, 621,
	0, 610, 609, 619, 620, 612, 613, 614, 615, 616,
	617, 618, 611, 1142, 911, 621, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 262, 0, 0, 911, 0,
	0, 0, 0, 0, 0, 262, 262, 0, 0, 0,
	0, 262, 0, 0, 262, 0, 0, 262, 0, 1405,
	0, 805, 0, 0, 0, 1239, 1427, 1428, 1429, 1430,
	1431, 262, 0, 0, 1434, 1435, 393, 0, 0, 0,
	0, 0, 0, 0, 393, 610, 609, 619, 620, 612,
	613, 614, 615, 616, 617, 618, 611, 0, 0, 621,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1022, 262, 0, 0, 0, 0, 0, 0, 0, 0,
	805, 0, 0, 1441, 1442, 1049, 1443, 1081, 0, 0,
	0, 1405, 0, 0, 0, 1229, 0, 1405, 1405, 1405,
	0, 0, 393, 0, 1313, 0, 0, 610, 609, 619,
	620, 612, 613, 614, 615, 616, 617, 618, 611, 0,
	0, 621, 315, 1405, 0, 0, 0, 315, 315, 0,
	0, 315, 315, 315, 0, 0, 0, 912, 0, 0,
	0, 0, 0, 0, 0, 1264, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 315, 315, 315, 315,
	0, 262, 0, 1506, 0, 0, 0, 0, 0, 262,
	0, 946, 0, 0, 262, 262, 393, 393, 262, 954,
	805, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 911, 0, 1302, 1525, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1556, 0, 0, 0, 1531, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1405, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 262, 0, 0, 0, 0, 0, 0, 262,
	262, 262, 262, 262, 0, 262, 262, 0, 0, 262,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 741, 0, 0, 0, 262, 0, 1054, 1055,
	0, 0, 1196, 262, 0, 0, 0, 1372, 805, 0,
	0, 0, 0, 0, 0, 0, 0, 646, 0, 0,
	315, 743, 0, 0, 0, 1387, 0, 0, 1388, 0,
	0, 1390, 1226, 0, 0, 0, 1142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 315, 0, 0,
	727, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 315, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 912, 262, 262, 262, 262, 262, 744,
	0, 0, 0, 0, 0, 0, 1136, 0, 0, 262,
	0, 0, 0, 0, 946, 0, 0, 0, 262, 0,
	0, 0, 757, 760, 761, 762, 763, 764, 765, 0,
	774, 775, 776, 777, 778, 745, 746, 747, 748, 725,
	726, 758, 0, 728, 0, 729, 730, 731, 732, 733,
	734, 735, 736, 737, 738, 749, 750, 751, 752, 753,
	754, 755, 756, 766, 767, 768, 769, 770, 771, 772,
	773, 779, 780, 739, 740, 0, 742, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1517, 646, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 759, 0,
	0, 0, 0, 262, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 315, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 315, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 805, 0, 0, 0, 0,
	0, 0, 0, 0, 912, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1416, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 262, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 262, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 262, 0, 0, 0, 0, 0,
	0, 0, 0, 262, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 912, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 262, 912, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1446, 0, 0, 0, 0, 0, 0, 946, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 262, 0, 0, 0, 0, 0, 502, 490, 0,
	447, 505, 421, 437, 513, 438, 441, 478, 406, 460,
	165, 435, 0, 425, 401, 431, 402, 423, 449, 111,
	453, 420, 492, 463, 504, 137, 511, 139, 469, 0,
	211, 153, 0, 0, 451, 494, 458, 487, 446, 479,
	411, 468, 506, 436, 476, 507, 0, 0, 0, 80,
	0, 1309, 1310, 0, 0, 0, 0, 0, 101, 912,
	473, 501, 433, 475, 477, 400, 470, 0, 404, 407,
	512, 497, 428, 429, 262, 0, 0, 0, 0, 0,
	0, 450, 459, 484, 444, 0, 0, 0, 0, 0,
	0, 0, 0, 426, 0, 467, 0, 0, 0, 408,
	405, 0, 0, 448, 0, 0, 0, 410, 0, 427,
	485, 0, 398, 119, 489, 496, 0, 445, 265, 500,
	443, 442, 503, 184, 0, 215, 122, 136, 97, 83,
	93, 0, 121, 162, 191, 195, 493, 424, 432, 105,
	430, 193, 172, 231, 466, 174, 192, 140, 221, 185,
	230, 240, 241, 218, 238, 245, 208, 86, 217, 229,
	102, 203, 88, 227, 214, 151, 131, 132, 87, 0,
	189, 110, 117, 107, 164, 224, 225, 106, 248, 94,
	237, 90, 95, 236, 158, 220, 228, 152, 145, 89,
	226, 150, 144, 135, 114, 124, 182, 142, 183, 125,
	155, 154, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 403, 0,
	212, 234, 249, 99, 419, 219, 243, 244, 0, 0,
	100, 118, 113, 0, 181, 157, 96, 127, 209, 134,
	141, 188, 247, 171, 194, 103, 233, 210, 415, 418,
	413, 414, 461, 462, 508, 509, 510, 486, 409, 0,
	416, 417, 0, 491, 498, 499, 465, 82, 91, 138,
	246, 186, 116, 235, 399, 412, 109, 422, 0, 0,
	434, 439, 440, 452, 454, 455, 456, 457, 464, 471,
	472, 474, 480, 481, 482, 483, 488, 495, 514, 84,
	85, 92, 98, 104, 108, 112, 115, 120, 123, 126,
	128, 129, 130, 133, 143, 146, 147, 148, 149, 159,
	160, 161, 163, 166, 167, 168, 169, 170, 173, 175,
	176, 177, 178, 179, 180, 187, 190, 196, 197, 198,
	199, 200, 201, 202, 204, 205, 206, 207, 213, 216,
	222, 223, 232, 239, 242, 502, 490, 0, 447, 505,
	421, 437, 513, 438, 441, 478, 406, 460, 165, 435,
	0, 425, 401, 431, 402, 423, 449, 111, 453, 420,
	492, 463, 504, 137, 511, 139, 469, 0, 211, 153,
	0, 0, 451, 494, 458, 487, 446, 479, 411, 468,
	506, 436, 476, 507, 54, 0, 0, 80, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 0, 473, 501,
	433, 475, 477, 400, 470, 0, 404, 407, 512, 497,
	428, 429, 0, 0, 0, 0, 0, 0, 0, 450,
	459, 484, 444, 0, 0, 0, 0, 0, 0, 0,
	0, 426, 0, 467, 0, 0, 0, 408, 405, 0,
	0, 448, 0, 0, 0, 410, 0, 427, 485, 0,
	398, 119, 489, 496, 0, 445, 265, 500, 443, 442,
	503, 184, 0, 215, 122, 136, 97, 83, 93, 0,
	121, 162, 191, 195, 493, 424, 432, 105, 430, 193,
	172, 231, 466, 174, 192, 140, 221, 185, 230, 240,
	241, 218, 238, 245, 208, 86, 217, 229, 102, 203,
	88, 227, 214, 151, 131, 132, 87, 0, 189, 110,
	117, 107, 164, 224, 225, 106, 248, 94, 237, 90,
	95, 236, 158, 220, 228, 152, 145, 89, 226, 150,
	144, 135, 114, 124, 182, 142, 183, 125, 155, 154,
	156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 403, 0, 212, 234,
	249, 99, 419, 219, 243, 244, 0, 0, 100, 118,
	113, 0, 181, 157, 96, 127, 209, 134, 141, 188,
	247, 171, 194, 103, 233, 210, 415, 418, 413, 414,
	461, 462, 508, 509, 510, 486, 409, 0, 416, 417,
	0, 491, 498, 499, 465, 82, 91, 138, 246, 186,
	116, 235, 399, 412, 109, 422, 0, 0, 434, 439,
	440, 452, 454, 455, 456, 457, 464, 471, 472, 474,
	480, 481, 482, 483, 488, 495, 514, 84, 85, 92,
	98, 104, 108, 112, 115, 120, 123, 126, 128, 129,
	130, 133, 143, 146, 147, 148, 149, 159, 160, 161,
	163, 166, 167, 168, 169, 170, 173, 175, 176, 177,
	178, 179, 180, 187, 190, 196, 197, 198, 199, 200,
	201, 202, 204, 205, 206, 207, 213, 216, 222, 223,
	232, 239, 242, 502, 490, 0, 447, 505, 421, 437,
	513, 438, 441, 478, 406, 460, 165, 435, 0, 425,
	401, 431, 402, 423, 449, 111, 453, 420, 492, 463,
	504, 137, 511, 139, 469, 0, 211, 153, 0, 0,
	451, 494, 458, 487, 446, 479, 411, 468, 506, 436,
	476, 507, 0, 0, 0, 80, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 473, 501, 433, 475,
	477, 400, 470, 0, 404, 407, 512, 497, 428, 429,
	0, 0, 0, 0, 0, 0, 0, 450, 459, 484,
	444, 0, 0, 0, 0, 0, 0, 1235, 0, 426,
	0, 467, 0, 0, 0, 408, 405, 0, 0, 448,
	0, 0, 0, 410, 0, 427, 485, 0, 398, 119,
	489, 496, 0, 445, 265, 500, 443, 442, 503, 184,
	0, 215, 122, 136, 97, 83, 93, 0, 121, 162,
	191, 195, 493, 424, 432, 105, 430, 193, 172, 231,
	466, 174, 192, 140, 221, 185, 230, 240, 241, 218,
	238, 245, 208, 86, 217, 229, 102, 203, 88, 227,
	214, 151, 131, 132, 87, 0, 189, 110, 117, 107,
	164, 224, 225, 106, 248, 94, 237, 90, 95, 236,
	158, 220, 228, 152, 145, 89, 226, 150, 144, 135,
	114, 124, 182, 142, 183, 125, 155, 154, 156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 403, 0, 212, 234, 249, 99,
	419, 219, 243, 244, 0, 0, 100, 118, 113, 0,
	181, 157, 96, 127, 209, 134, 141, 188, 247, 171,
	194, 103, 233, 210, 415, 418, 413, 414, 461, 462,
	508, 509, 510, 486, 409, 0, 416, 417, 0, 491,
	498, 499, 465, 82, 91, 138, 246, 186, 116, 235,
	399, 412, 109, 422, 0, 0, 434, 439, 440, 452,
	454, 455, 456, 457, 464, 471, 472, 474, 480, 481,
	482, 483, 488, 495, 514, 84, 85, 92, 98, 104,
	108, 112, 115, 120, 123, 126, 128, 129, 130, 133,
	143, 146, 147, 148, 149, 159, 160, 161, 163, 166,
	167, 168, 169, 170, 173, 175, 176, 177, 178, 179,
	180, 187, 190, 196, 197, 198, 199, 200, 201, 202,
	204, 205, 206, 207, 213, 216, 222, 223, 232, 239,
	242, 502, 490, 0, 447, 505, 421, 437, 513, 438,
	441, 478, 406, 460, 165, 435, 0, 425, 401, 431,
	402, 423, 449, 111, 453, 420, 492, 463, 504, 137,
	511, 139, 469, 0, 211, 153, 0, 0, 451, 494,
	458, 487, 446, 479, 411, 468, 506, 436, 476, 507,
	0, 0, 0, 263, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 0, 473, 501, 433, 475, 477, 400,
	470, 0, 404, 407, 512, 497, 428, 429, 0, 0,
	0, 0, 0, 0, 0, 450, 459, 484, 444, 0,
	0, 0, 0, 0, 0, 955, 0, 426, 0, 467,
	0, 0, 0, 408, 405, 0, 0, 448, 0, 0,
	0, 410, 0, 427, 485, 0, 398, 119, 489, 496,
	0, 445, 265, 500, 443, 442, 503, 184, 0, 215,
	122, 136, 97, 83, 93, 0, 121, 162, 191, 195,
	493, 424, 432, 105, 430, 193, 172, 231, 466, 174,
	192, 140, 221, 185, 230, 240, 241, 218, 238, 245,
	208, 86, 217, 229, 102, 203, 88, 227, 214, 151,
	131, 132, 87, 0, 189, 110, 117, 107, 164, 224,
	225, 106, 248, 94, 237, 90, 95, 236, 158, 220,
	228, 152, 145, 89, 226, 150, 144, 135, 114, 124,
	182, 142, 183, 125, 155, 154, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 403, 0, 212, 234, 249, 99, 419, 219,
	243, 244, 0, 0, 100, 118, 113, 0, 181, 157,
	96, 127, 209, 134, 141, 188, 247, 171, 194, 103,
	233, 210, 415, 418, 413, 414, 461, 462, 508, 509,
	510, 486, 409, 0, 416, 417, 0, 491, 498, 499,
	465, 82, 91, 138, 246, 186, 116, 235, 399, 412,
	109, 422, 0, 0, 434, 439, 440, 452, 454, 455,
	456, 457, 464, 471, 472, 474, 480, 481, 482, 483,
	488, 495, 514, 84, 85, 92, 98, 104, 108, 112,
	115, 120, 123, 126, 128, 129, 130, 133, 143, 146,
	147, 148, 149, 159, 160, 161, 163, 166, 167, 168,
	169, 170, 173, 175, 176, 177, 178, 179, 180, 187,
	190, 196, 197, 198, 199, 200, 201, 202, 204, 205,
	206, 207, 213, 216, 222, 223, 232, 239, 242, 502,
	490, 0, 447, 505, 421, 437, 513, 438, 441, 478,
	406, 460, 165, 435, 0, 425, 401, 431, 402, 423,
	449, 111, 453, 420, 492, 463, 504, 137, 511, 139,
	469, 0, 211, 153, 0, 0, 451, 494, 458, 487,
	446, 479, 411, 468, 506, 436, 476, 507, 0, 0,
	0, 320, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 473, 501, 433, 475, 477, 400, 470, 0,
	404, 407, 512, 497, 428, 429, 0, 0, 0, 0,
	0, 0, 0, 450, 459, 484, 444, 0, 0, 0,
	0, 0, 0, 852, 0, 426, 0, 467, 0, 0,
	0, 408, 405, 0, 0, 448, 0, 0, 0, 410,
	0, 427, 485, 0, 398, 119, 489, 496, 0, 445,
	265, 500, 443, 442, 503, 184, 0, 215, 122, 136,
	97, 83, 93, 0, 121, 162, 191, 195, 493, 424,
	432, 105, 430, 193, 172, 231, 466, 174, 192, 140,
	221, 185, 230, 240, 241, 218, 238, 245, 208, 86,
	217, 229, 102, 203, 88, 227, 214, 151, 131, 132,
	87, 0, 189, 110, 117, 107, 164, 224, 225, 106,
	248, 94, 237, 90, 95, 236, 158, 220, 228, 152,
	145, 89, 226, 150, 144, 135, 114, 124, 182, 142,
	183, 125, 155, 154, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	403, 0, 212, 234, 249, 99, 419, 219, 243, 244,
	0, 0, 100, 118, 113, 0, 181, 157, 96, 127,
	209, 134, 141, 188, 247, 171, 194, 103, 233, 210,
	415, 418, 413, 414, 461, 462, 508, 509, 510, 486,
	409, 0, 416, 417, 0, 491, 498, 499, 465, 82,
	91, 138, 246, 186, 116, 235, 399, 412, 109, 422,
	0, 0, 434, 439, 440, 452, 454, 455, 456, 457,
	464, 471, 472, 474, 480, 481, 482, 483, 488, 495,
	514, 84, 85, 92, 98, 104, 108, 112, 115, 120,
	123, 126, 128, 129, 130, 133, 143, 146, 147, 148,
	149, 159, 160, 161, 163, 166, 167, 168, 169, 170,
	173, 175, 176, 177, 178, 179, 180, 187, 190, 196,
	197, 198, 199, 200, 201, 202, 204, 205, 206, 207,
	213, 216, 222, 223, 232, 239, 242, 502, 490, 0,
	447, 505, 421, 437, 513, 438, 441, 478, 406, 460,
	165, 435, 0, 425, 401, 431, 402, 423, 449, 111,
	453, 420, 492, 463, 504, 137, 511, 139, 469, 0,
	211, 153, 0, 0, 451, 494, 458, 487, 446, 479,
	411, 468, 506, 436, 476, 507, 0, 0, 0, 80,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	473, 501, 433, 475, 477, 400, 470, 0, 404, 407,
	512, 497, 428, 429, 0, 0, 0, 0, 0, 0,
	0, 450, 459, 484, 444, 0, 0, 0, 0, 0,
	0, 0, 0, 426, 0, 467, 0, 0, 0, 408,
	405, 0, 0, 448, 0, 0, 0, 410, 0, 427,
	485, 0, 398, 119, 489, 496, 0, 445, 265, 500,
	443, 442, 503, 184, 0, 215, 122, 136, 97, 83,
	93, 0, 121, 162, 191, 195, 493, 424, 432, 105,
	430, 193, 172, 231, 466, 174, 192, 140, 221, 185,
	230, 240, 241, 218, 238, 245, 208, 86, 217, 229,
	102, 203, 88, 227, 214, 151, 131, 132, 87, 0,
	189, 110, 117, 107, 164, 224, 225, 106, 248, 94,
	237, 90, 95, 236, 158, 220, 228, 152, 145, 89,
	226, 150, 144, 135, 114, 124, 182, 142, 183, 125,
	155, 154, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 403, 0,
	212, 234, 249, 99, 419, 219, 243, 244, 0, 0,
	100, 118, 113, 0, 181, 157, 96, 127, 209, 134,
	141, 188, 247, 171, 194, 103, 233, 210, 415, 418,
	413, 414, 461, 462, 508, 509, 510, 486, 409, 0,
	416, 417, 0, 491, 498, 499, 465, 82, 91, 138,
	246, 186, 116, 235, 399, 412, 109, 422, 0, 0,
	434, 439, 440, 452, 454, 455, 456, 457, 464, 471,
	472, 474, 480, 481, 482, 483, 488, 495, 514, 84,
	85, 92, 98, 104, 108, 112, 115, 120, 123, 126,
	128, 129, 130, 133, 143, 146, 147, 148, 149, 159,
	160, 161, 163, 166, 167, 168, 169, 170, 173, 175,
	176, 177, 178, 179, 180, 187, 190, 196, 197, 198,
	199, 200, 201, 202, 204, 205, 206, 207, 213, 216,
	222, 223, 232, 239, 242, 502, 490, 0, 447, 505,
	421, 437, 513, 438, 441, 478, 406, 460, 165, 435,
	0, 425, 401, 431, 402, 423, 449, 111, 453, 420,
	492, 463, 504, 137, 511, 139, 469, 0, 211, 153,
	0, 0, 451, 494, 458, 487, 446, 479, 411, 468,
	506, 436, 476, 507, 0, 0, 0, 320, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 0, 473, 501,
	433, 475, 477, 400, 470, 0, 404, 407, 512, 497,
	428, 429, 0, 0, 0, 0, 0, 0, 0, 450,
	459, 484, 444, 0, 0, 0, 0, 0, 0, 0,
	0, 426, 0, 467, 0, 0, 0, 408, 405, 0,
	0, 448, 0, 0, 0, 410, 0, 427, 485, 0,
	398, 119, 489, 496, 0, 445, 265, 500, 443, 442,
	503, 184, 0, 215, 122, 136, 97, 83, 93, 0,
	121, 162, 191, 195, 493, 424, 432, 105, 430, 193,
	172, 231, 466, 174, 192, 140, 221, 185, 230, 240,
	241, 218, 238, 245, 208, 86, 217, 229, 102, 203,
	88, 227, 214, 151, 131, 132, 87, 0, 189, 110,
	117, 107, 164, 224, 225, 106, 248, 94, 237, 90,
	95, 236, 158, 220, 228, 152, 145, 89, 226, 150,
	144, 135, 114, 124, 182, 142, 183, 125, 155, 154,
	156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 403, 0, 212, 234,
	249, 99, 419, 219, 243, 244, 0, 0, 100, 118,
	113, 0, 181, 157, 96, 127, 209, 134, 141, 188,
	247, 171, 194, 103, 233, 210, 415, 418, 413, 414,
	461, 462, 508, 509, 510, 486, 409, 0, 416, 417,
	0, 491, 498, 499, 465, 82, 91, 138, 246, 186,
	116, 235, 399, 412, 109, 422, 0, 0, 434, 439,
	440, 452, 454, 455, 456, 457, 464, 471, 472, 474,
	480, 481, 482, 483, 488, 495, 514, 84, 85, 92,
	98, 104, 108, 112, 115, 120, 123, 126, 128, 129,
	130, 133, 143, 146, 147, 148, 149, 159, 160, 161,
	163, 166, 167, 168, 169, 170, 173, 175, 176, 177,
	178, 179, 180, 187, 190, 196, 197, 198, 199, 200,
	201, 202, 204, 205, 206, 207, 213, 216, 222, 223,
	232, 239, 242, 502, 490, 0, 447, 505, 421, 437,
	513, 438, 441, 478, 406, 460, 165, 435, 0, 425,
	401, 431, 402, 423, 449, 111, 453, 420, 492, 463,
	504, 137, 511, 139, 469, 0, 211, 153, 0, 0,
	451, 494, 458, 487, 446, 479, 411, 468, 506, 436,
	476, 507, 0, 0, 0, 80, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 473, 501, 433, 475,
	477, 400, 470, 0, 404, 407, 512, 497, 428, 429,
	0, 0, 0, 0, 0, 0, 0, 450, 459, 484,
	444, 0, 0, 0, 0, 0, 0, 0, 0, 426,
	0, 467, 0, 0, 0, 408, 405, 0, 0, 448,
	0, 0, 0, 410, 0, 427, 485, 0, 398, 119,
	489, 496, 0, 445, 265, 500, 443, 442, 503, 184,
	0, 215, 122, 136, 97, 83, 93, 0, 121, 162,
	191, 195, 493, 424, 432, 105, 430, 193, 172, 231,
	466, 174, 192, 140, 221, 185, 230, 240, 241, 218,
	238, 245, 208, 86, 217, 229, 102, 203, 88, 227,
	214, 151, 131, 132, 87, 0, 189, 110, 117, 107,
	164, 224, 225, 106, 248, 94, 237, 90, 396, 236,
	158, 220, 228, 152, 145, 89, 226, 150, 144, 135,
	114, 124, 182, 142, 183, 125, 155, 154, 156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 403, 0, 212, 234, 249, 99,
	419, 219, 243, 244, 0, 0, 100, 118, 113, 0,
	181, 397, 395, 127, 209, 134, 141, 188, 247, 171,
	194, 103, 233, 210, 415, 418, 413, 414, 461, 462,
	508, 509, 510, 486, 409, 0, 416, 417, 0, 491,
	498, 499, 465, 82, 91, 138, 246, 186, 116, 235,
	399, 412, 109, 422, 0, 0, 434, 439, 440, 452,
	454, 455, 456, 457, 464, 471, 472, 474, 480, 481,
	482, 483, 488, 495, 514, 84, 85, 92, 98, 104,
	108, 112, 115, 120, 123, 126, 128, 129, 130, 133,
	143, 146, 147, 148, 149, 159, 160, 161, 163, 166,
	167, 168, 169, 170, 173, 175, 176, 177, 178, 179,
	180, 187, 190, 196, 197, 198, 199, 200, 201, 202,
	204, 205, 206, 207, 213, 216, 222, 223, 232, 239,
	242, 502, 490, 0, 447, 505, 421, 437, 513, 438,
	441, 478, 406, 460, 165, 435, 0, 425, 401, 431,
	402, 423, 449, 111, 453, 420, 492, 463, 504, 137,
	511, 139, 469, 0, 211, 153, 0, 0, 451, 494,
	458, 487, 446, 479, 411, 468, 506, 436, 476, 507,
	0, 0, 0, 263, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 0, 473, 501, 433, 475, 477, 400,
	470, 0, 404, 407, 512, 497, 428, 429, 0, 0,
	0, 0, 0, 0, 0, 450, 459, 484, 444, 0,
	0, 0, 0, 0, 0, 0, 0, 426, 0, 467,
	0, 0, 0, 408, 405, 0, 0, 448, 0, 0,
	0, 410, 0, 427, 485, 0, 398, 119, 489, 496,
	0, 445, 265, 500, 443, 442, 503, 184, 0, 215,
	122, 136, 97, 83, 93, 0, 121, 162, 191, 195,
	493, 424, 432, 105, 430, 193, 172, 231, 466, 174,
	192, 140, 221, 185, 230, 240, 241, 218, 238, 245,
	208, 86, 217, 229, 102, 203, 88, 227, 214, 151,
	131, 132, 87, 0, 189, 110, 117, 107, 164, 224,
	225, 106, 248, 94, 237, 90, 95, 236, 158, 220,
	228, 152, 145, 89, 226, 150, 144, 135, 114, 124,
	182, 142, 183, 125, 155, 154, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 403, 0, 212, 234, 249, 99, 419, 219,
	243, 244, 0, 0, 100, 118, 113, 0, 181, 157,
	96, 127, 209, 134, 141, 188, 247, 171, 194, 103,
	233, 210, 415, 418, 413, 414, 461, 462, 508, 509,
	510, 486, 409, 0, 416, 417, 0, 491, 498, 499,
	465, 82, 91, 138, 246, 186, 116, 235, 399, 412,
	109, 422, 0, 0, 434, 439, 440, 452, 454, 455,
	456, 457, 464, 471, 472, 474, 480, 481, 482, 483,
	488, 495, 514, 84, 85, 92, 98, 104, 108, 112,
	115, 120, 123, 126, 128, 129, 130, 133, 143, 146,
	147, 148, 149, 159, 160, 161, 163, 166, 167, 168,
	169, 170, 173, 175, 176, 177, 178, 179, 180, 187,
	190, 196, 197, 198, 199, 200, 201, 202, 204, 205,
	206, 207, 213, 216, 222, 223, 232, 239, 242, 502,
	490, 0, 447, 505, 421, 437, 513, 438, 441, 478,
	406, 460, 165, 435, 0, 425, 401, 431, 402, 423,
	449, 111, 453, 420, 492, 463, 504, 137, 511, 139,
	469, 0, 211, 153, 0, 0, 451, 494, 458, 487,
	446, 479, 411, 468, 506, 436, 476, 507, 0, 0,
	0, 80, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 473, 501, 433, 475, 477, 400, 470, 0,
	404, 407, 512, 497, 428, 429, 0, 0, 0, 0,
	0, 0, 0, 450, 459, 484, 444, 0, 0, 0,
	0, 0, 0, 0, 0, 426, 0, 467, 0, 0,
	0, 408, 405, 0, 0, 448, 0, 0, 0, 410,
	0, 427, 485, 0, 398, 119, 489, 496, 0, 445,
	265, 500, 443, 442, 503, 184, 0, 215, 122, 136,
	97, 83, 93, 0, 121, 162, 191, 195, 493, 424,
	432, 105, 430, 193, 172, 231, 466, 174, 192, 140,
	221, 185, 230, 240, 241, 218, 238, 245, 208, 86,
	217, 704, 102, 203, 88, 227, 214, 151, 131, 132,
	87, 0, 189, 110, 117, 107, 164, 224, 225, 106,
	248, 94, 237, 90, 396, 236, 158, 220, 228, 152,
	145, 89, 226, 150, 144, 135, 114, 124, 182, 142,
	183, 125, 155, 154, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	403, 0, 212, 234, 249, 99, 419, 219, 243, 244,
	0, 0, 100, 118, 113, 0, 181, 397, 395, 127,
	209, 134, 141, 188, 247, 171, 194, 103, 233, 210,
	415, 418, 413, 414, 461, 462, 508, 509, 510, 486,
	409, 0, 416, 417, 0, 491, 498, 499, 465, 82,
	91, 138, 246, 186, 116, 235, 399, 412, 109, 422,
	0, 0, 434, 439, 440, 452, 454, 455, 456, 457,
	464, 471, 472, 474, 480, 481, 482, 483, 488, 495,
	514, 84, 85, 92, 98, 104, 108, 112, 115, 120,
	123, 126, 128, 129, 130, 133, 143, 146, 147, 148,
	149, 159, 160, 161, 163, 166, 167, 168, 169, 170,
	173, 175, 176, 177, 178, 179, 180, 187, 190, 196,
	197, 198, 199, 200, 201, 202, 204, 205, 206, 207,
	213, 216, 222, 223, 232, 239, 242, 502, 490, 0,
	447, 505, 421, 437, 513, 438, 441, 478, 406, 460,
	165, 435, 0, 425, 401, 431, 402, 423, 449, 111,
	453, 420, 492, 463, 504, 137, 511, 139, 469, 0,
	211, 153, 0, 0, 451, 494, 458, 487, 446, 479,
	411, 468, 506, 436, 476, 507, 0, 0, 0, 80,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	473, 501, 433, 475, 477, 400, 470, 0, 404, 407,
	512, 497, 428, 429, 0, 0, 0, 0, 0, 0,
	0, 450, 459, 484, 444, 0, 0, 0, 0, 0,
	0, 0, 0, 426, 0, 467, 0, 0, 0, 408,
	405, 0, 0, 448, 0, 0, 0, 410, 0, 427,
	485, 0, 398, 119, 489, 496, 0, 445, 265, 500,
	443, 442, 503, 184, 0, 215, 122, 136, 97, 83,
	93, 0, 121, 162, 191, 195, 493, 424, 432, 105,
	430, 193, 172, 231, 466, 174, 192, 140, 221, 185,
	230, 240, 241, 218, 238, 245, 208, 86, 217, 387,
	102, 203, 88, 227, 214, 151, 131, 132, 87, 0,
	189, 110, 117, 107, 164, 224, 225, 106, 248, 94,
	237, 90, 396, 236, 158, 220, 228, 152, 145, 89,
	226, 150, 144, 135, 114, 124, 182, 142, 183, 125,
	155, 154, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 403, 0,
	212, 234, 249, 99, 419, 219, 243, 244, 0, 0,
	100, 118, 113, 0, 181, 397, 395, 390, 389, 134,
	141, 188, 247, 171, 194, 103, 233, 210, 415, 418,
	413, 414, 461, 462, 508, 509, 510, 486, 409, 0,
	416, 417, 0, 491, 498, 499, 465, 82, 91, 138,
	246, 186, 116, 235, 399, 412, 109, 422, 0, 0,
	434, 439, 440, 452, 454, 455, 456, 457, 464, 471,
	472, 474, 480, 481, 482, 483, 488, 495, 514, 84,
	85, 92, 98, 104, 108, 112, 115, 120, 123, 126,
	128, 129, 130, 133, 143, 146, 147, 148, 149, 159,
	160, 161, 163, 166, 167, 168, 169, 170, 173, 175,
	176, 177, 178, 179, 180, 187, 190, 196, 197, 198,
	199, 200, 201, 202, 204, 205, 206, 207, 213, 216,
	222, 223, 232, 239, 242, 165, 0, 0, 0, 0,
	322, 0, 0, 0, 111, 0, 319, 0, 0, 0,
	137, 362, 139, 0, 0, 211, 153, 0, 0, 0,
	0, 353, 354, 0, 0, 0, 0, 0, 0, 0,
	0, 54, 0, 0, 320, 341, 340, 343, 344, 345,
	346, 0, 0, 101, 342, 347, 348, 349, 0, 0,
	0, 317, 334, 0, 361, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 331, 332, 0, 0, 0, 0,
	375, 0, 333, 0, 0, 328, 329, 330, 335, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 119, 0,
	1143, 1144, 0, 265, 0, 0, 373, 0, 184, 0,
	215, 122, 136, 97, 83, 93, 0, 121, 162, 191,
	195, 0, 0, 0, 105, 0, 193, 172, 231, 0,
	174, 192, 140, 221, 185, 230, 240, 241, 218, 238,
	245, 208, 86, 217, 229, 102, 203, 88, 227, 214,
	151, 131, 132, 87, 0, 189, 110, 117, 107, 164,
	224, 225, 106, 248, 94, 237, 90, 95, 236, 158,
	220, 228, 152, 145, 89, 226, 150, 144, 135, 114,
	124, 182, 142, 183, 125, 155, 154, 156, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 234, 249, 99, 0,
	219, 243, 244, 0, 0, 100, 118, 113, 0, 181,
	157, 96, 127, 209, 134, 141, 188, 247, 171, 194,
	103, 233, 210, 363, 374, 369, 370, 367, 368, 366,
	365, 364, 376, 355, 356, 357, 358, 360, 0, 371,
	372, 359, 82, 91, 138, 246, 186, 116, 235, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 85, 92, 98, 104, 108,
	112, 115, 120, 123, 126, 128, 129, 130, 133, 143,
	146, 147, 148, 149, 159, 160, 161, 163, 166, 167,
	168, 169, 170, 173, 175, 176, 177, 178, 179, 180,
	187, 190, 196, 197, 198, 199, 200, 201, 202, 204,
	205, 206, 207, 213, 216, 222, 223, 232, 239, 242,
	165, 0, 0, 0, 0, 322, 0, 0, 0, 111,
	0, 319, 0, 0, 0, 137, 362, 139, 0, 0,
	211, 153, 0, 0, 0, 0, 353, 354, 0, 0,
	0, 0, 0, 0, 962, 0, 54, 0, 0, 320,
	341, 340, 343, 344, 345, 346, 0, 0, 101, 342,
	347, 348, 349, 963, 0, 0, 317, 334, 0, 361,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 331,
	332, 0, 0, 0, 0, 375, 0, 333, 0, 0,
	328, 329, 330, 335, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 119, 0, 0, 0, 0, 265, 0,
	0, 373, 0, 184, 0, 215, 122, 136, 97, 83,
	93, 0, 121, 162, 191, 195, 0, 0, 0, 105,
	0, 193, 172, 231, 0, 174, 192, 140, 221, 185,
	230, 240, 241, 218, 238, 245, 208, 86, 217, 229,
	102, 203, 88, 227, 214, 151, 131, 132, 87, 0,
	189, 110, 117, 107, 164, 224, 225, 106, 248, 94,
	237, 90, 95, 236, 158, 220, 228, 152, 145, 89,
	226, 150, 144, 135, 114, 124, 182, 142, 183, 125,
	155, 154, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 234, 249, 99, 0, 219, 243, 244, 0, 0,
	100, 118, 113, 0, 181, 157, 96, 127, 209, 134,
	141, 188, 247, 171, 194, 103, 233, 210, 363, 374,
	369, 370, 367, 368, 366, 365, 364, 376, 355, 356,
	357, 358, 360, 0, 371, 372, 359, 82, 91, 138,
	246, 186, 116, 235, 0, 0, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	85, 92, 98, 104, 108, 112, 115, 120, 123, 126,
	128, 129, 130, 133, 143, 146, 147, 148, 149, 159,
	160, 161, 163, 166, 167, 168, 169, 170, 173, 175,
	176, 177, 178, 179, 180, 187, 190, 196, 197, 198,
	199, 200, 201, 202, 204, 205, 206, 207, 213, 216,
	222, 223, 232, 239, 242, 165, 0, 0, 888, 0,
	322, 0, 0, 0, 111, 0, 319, 0, 0, 0,
	137, 362, 139, 0, 0, 211, 153, 0, 0, 0,
	0, 353, 354, 0, 0, 0, 0, 0, 0, 0,
	0, 54, 0, 0, 320, 341, 340, 343, 344, 345,
	346, 0, 0, 101, 342, 347, 348, 349, 0, 0,
	0, 317, 334, 0, 361, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 331, 332, 313, 0, 0, 0,
	375, 0, 333, 0, 0, 328, 329, 330, 335, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 119, 0,
	0, 0, 0, 265, 0, 0, 373, 0, 184, 0,
	215, 122, 136, 97, 83, 93, 0, 121, 162, 191,
	195, 0, 0, 0, 105, 0, 193, 172, 231, 0,
	174, 192, 140, 221, 185, 230, 240, 241, 218, 238,
	245, 208, 86, 217, 229, 102, 203, 88, 227, 214,
	151, 131, 132, 87, 0, 189, 110, 117, 107, 164,
	224, 225, 106, 248, 94, 237, 90, 95, 236, 158,
	220, 228, 152, 145, 89, 226, 150, 144, 135, 114,
	124, 182, 142, 183, 125, 155, 154, 156, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 234, 249, 99, 0,
	219, 243, 244, 0, 0, 100, 118, 113, 0, 181,
	157, 96, 127, 209, 134, 141, 188, 247, 171, 194,
	103, 233, 210, 363, 374, 369, 370, 367, 368, 366,
	365, 364, 376, 355, 356, 357, 358, 360, 0, 371,
	372, 359, 82, 91, 138, 246, 186, 116, 235, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 85, 92, 98, 104, 108,
	112, 115, 120, 123, 126, 128, 129, 130, 133, 143,
	146, 147, 148, 149, 159, 160, 161, 163, 166, 167,
	168, 169, 170, 173, 175, 176, 177, 178, 179, 180,
	187, 190, 196, 197, 198, 199, 200, 201, 202, 204,
	205, 206, 207, 213, 216, 222, 223, 232, 239, 242,
	165, 0, 0, 0, 0, 322, 0, 0, 0, 111,
	0, 319, 0, 0, 0, 137, 362, 139, 0, 0,
	211, 153, 0, 0, 0, 0, 353, 354, 0, 0,
	0, 0, 0, 0, 0, 0, 54, 0, 576, 320,
	341, 340, 343, 344, 345, 346, 0, 0, 101, 342,
	347, 348, 349, 0, 0, 0, 317, 334, 0, 361,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 331,
	332, 0, 0, 0, 0, 375, 0, 333, 0, 0,
	328, 329, 330, 335, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 119, 0, 0, 0, 0, 265, 0,
	0, 373, 0, 184, 0, 215, 122, 136, 97, 83,
	93, 0, 121, 162, 191, 195, 0, 0, 0, 105,
	0, 193, 172, 231, 0, 174, 192, 140, 221, 185,
	230, 240, 241, 218, 238, 245, 208, 86, 217, 229,
	102, 203, 88, 227, 214, 151, 131, 132, 87, 0,
	189, 110, 117, 107, 164, 224, 225, 106, 248, 94,
	237, 90, 95, 236, 158, 220, 228, 152, 145, 89,
	226, 150, 144, 135, 114, 124, 182, 142, 183, 125,
	155, 154, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 234, 249, 99, 0, 219, 243, 244, 0, 0,
	100, 118, 113, 0, 181, 157, 96, 127, 209, 134,
	141, 188, 247, 171, 194, 103, 233, 210, 363, 374,
	369, 370, 367, 368, 366, 365, 364, 376, 355, 356,
	357, 358, 360, 0, 371, 372, 359, 82, 91, 138,
	246, 186, 116, 235, 0, 0, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	85, 92, 98, 104, 108, 112, 115, 120, 123, 126,
	128, 129, 130, 133, 143, 146, 147, 148, 149, 159,
	160, 161, 163, 166, 167, 168, 169, 170, 173, 175,
	176, 177, 178, 179, 180, 187, 190, 196, 197, 198,
	199, 200, 201, 202, 204, 205, 206, 207, 213, 216,
	222, 223, 232, 239, 242, 165, 0, 0, 0, 0,
	322, 0, 0, 0, 111, 0, 319, 0, 0, 0,
	137, 362, 139, 0, 0, 211, 153, 0, 0, 0,
	0, 353, 354, 0, 0, 0, 0, 0, 0, 0,
	0, 54, 0, 0, 320, 341, 340, 343, 344, 345,
	346, 0, 0, 101, 342, 347, 348, 349, 0, 0,
	0, 317, 334, 0, 361, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 331, 332, 313, 0, 0, 0,
	375, 0, 333, 0, 0, 328, 329, 330, 335, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 119, 0,
	0, 0, 0, 265, 0, 0, 373, 0, 184, 0,
	215, 122, 136, 97, 83, 93, 0, 121, 162, 191,
	195, 0, 0, 0, 105, 0, 193, 172, 231, 0,
	174, 192, 140, 221, 185, 230, 240, 241, 218, 238,
	245, 208, 86, 217, 229, 102, 203, 88, 227, 214,
	151, 131, 132, 87, 0, 189, 110, 117, 107, 164,
	224, 225, 106, 248, 94, 237, 90, 95, 236, 158,
	220, 228, 152, 145, 89, 226, 150, 144, 135, 114,
	124, 182, 142, 183, 125, 155, 154, 156, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 234, 249, 99, 0,
	219, 243, 244, 0, 0, 100, 118, 113, 0, 181,
	157, 96, 127, 209, 134, 141, 188, 247, 171, 194,
	103, 233, 210, 363, 374, 369, 370, 367, 368, 366,
	365, 364, 376, 355, 356, 357, 358, 360, 0, 371,
	372, 359, 82, 91, 138, 246, 186, 116, 235, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 85, 92, 98, 104, 108,
	112, 115, 120, 123, 126, 128, 129, 130, 133, 143,
	146, 147, 148, 149, 159, 160, 161, 163, 166, 167,
	168, 169, 170, 173, 175, 176, 177, 178, 179, 180,
	187, 190, 196, 197, 198, 199, 200, 201, 202, 204,
	205, 206, 207, 213, 216, 222, 223, 232, 239, 242,
	165, 0, 0, 0, 0, 322, 0, 0, 0, 111,
	0, 319, 0, 0, 0, 137, 362, 139, 0, 0,
	211, 153, 0, 0, 0, 0, 353, 354, 0, 0,
	0, 0, 0, 0, 0, 0, 54, 0, 0, 320,
	341, 903, 343, 344, 345, 346, 0, 0, 101, 342,
	347, 348, 349, 0, 0, 0, 317, 334, 0, 361,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 331,
	332, 313, 0, 0, 0, 375, 0, 333, 0, 0,
	328, 329, 330, 335, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 119, 0, 0, 0, 0, 265, 0,
	0, 373, 0, 184, 0, 215, 122, 136, 97, 83,
	93, 0, 121, 162, 191, 195, 0, 0, 0, 105,
	0, 193, 172, 231, 0, 174, 192, 140, 221, 185,
	230, 240, 241, 218, 238, 245, 208, 86, 217, 229,
	102, 203, 88, 227, 214, 151, 131, 132, 87, 0,
	189, 110, 117, 107, 164, 224, 225, 106, 248, 94,
	237, 90, 95, 236, 158, 220, 228, 152, 145, 89,
	226, 150, 144, 135, 114, 124, 182, 142, 183, 125,
	155, 154, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 234, 249, 99, 0, 219, 243, 244, 0, 0,
	100, 118, 113, 0, 181, 157, 96, 127, 209, 134,
	141, 188, 247, 171, 194, 103, 233, 210, 363, 374,
	369, 370, 367, 368, 366, 365, 364, 376, 355, 356,
	357, 358, 360, 0, 371, 372, 359, 82, 91, 138,
	246, 186, 116, 235, 0, 0, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	85, 92, 98, 104, 108, 112, 115, 120, 123, 126,
	128, 129, 130, 133, 143, 146, 147, 148, 149, 159,
	160, 161, 163, 166, 167, 168, 169, 170, 173, 175,
	176, 177, 178, 179, 180, 187, 190, 196, 197, 198,
	199, 200, 201, 202, 204, 205, 206, 207, 213, 216,
	222, 223, 232, 239, 242, 165, 0, 0, 0, 0,
	322, 0, 0, 0, 111, 0, 319, 0, 0, 0,
	137, 362, 139, 0, 0, 211, 153, 0, 0, 0,
	0, 353, 354, 0, 0, 0, 0, 0, 0, 0,
	0, 54, 0, 0, 320, 341, 900, 343, 344, 345,
	346, 0, 0, 101, 342, 347, 348, 349, 0, 0,
	0, 317, 334, 0, 361, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 331, 332, 313, 0, 0, 0,
	375, 0, 333, 0, 0, 328, 329, 330, 335, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 119, 0,
	0, 0, 0, 265, 0, 0, 373, 0, 184, 0,
	215, 122, 136, 97, 83, 93, 0, 121, 162, 191,
	195, 0, 0, 0, 105, 0, 193, 172, 231, 0,
	174, 192, 140, 221, 185, 230, 240, 241, 218, 238,
	245, 208, 86, 217, 229, 102, 203, 88, 227, 214,
	151, 131, 132, 87, 0, 189, 110, 117, 107, 164,
	224, 225, 106, 248, 94, 237, 90, 95, 236, 158,
	220, 228, 152, 145, 89, 226, 150, 144, 135, 114,
	124, 182, 142, 183, 125, 155, 154, 156, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 234, 249, 99, 0,
	219, 243, 244, 0, 0, 100, 118, 113, 0, 181,
	157, 96, 127, 209, 134, 141, 188, 247, 171, 194,
	103, 233, 210, 363, 374, 369, 370, 367, 368, 366,
	365, 364, 376, 355, 356, 357, 358, 360, 0, 371,
	372, 359, 82, 91, 138, 246, 186, 116, 235, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 85, 92, 98, 104, 108,
	112, 115, 120, 123, 126, 128, 129, 130, 133, 143,
	146, 147, 148, 149, 159, 160, 161, 163, 166, 167,
	168, 169, 170, 173, 175, 176, 177, 178, 179, 180,
	187, 190, 196, 197, 198, 199, 200, 201, 202, 204,
	205, 206, 207, 213, 216, 222, 223, 232, 239, 242,
	24, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 0, 0, 0, 0, 322, 0, 0,
	0, 111, 0, 319, 0, 0, 0, 137, 362, 139,
	0, 0, 211, 153, 0, 0, 0, 0, 353, 354,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 320, 341, 340, 343, 344, 345, 346, 0, 0,
	101, 342, 347, 348, 349, 0, 0, 0, 317, 334,
	0, 361, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 331, 332, 0, 0, 0, 0, 375, 0, 333,
	0, 0, 328, 329, 330, 335, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 0,
	265, 0, 0, 373, 0, 184, 0, 215, 122, 136,
	97, 83, 93, 0, 121, 162, 191, 195, 0, 0,
	0, 105, 0, 193, 172, 231, 0, 174, 192, 140,
	221, 185, 230, 240, 241, 218, 238, 245, 208, 86,
	217, 229, 102, 203, 88, 227, 214, 151, 131, 132,
	87, 0, 189, 110, 117, 107, 164, 224, 225, 106,
	248, 94, 237, 90, 95, 236, 158, 220, 228, 152,
	145, 89, 226, 150, 144, 135, 114, 124, 182, 142,
	183, 125, 155, 154, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 234, 249, 99, 0, 219, 243, 244,
	0, 0, 100, 118, 113, 0, 181, 157, 96, 127,
	209, 134, 141, 188, 247, 171, 194, 103, 233, 210,
	363, 374, 369, 370, 367, 368, 366, 365, 364, 376,
	355, 356, 357, 358, 360, 0, 371, 372, 359, 82,
	91, 138, 246, 186, 116, 235, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 85, 92, 98, 104, 108, 112, 115, 120,
	123, 126, 128, 129, 130, 133, 143, 146, 147, 148,
	149, 159, 160, 161, 163, 166, 167, 168, 169, 170,
	173, 175, 176, 177, 178, 179, 180, 187, 190, 196,
	197, 198, 199, 200, 201, 202, 204, 205, 206, 207,
	213, 216, 222, 223, 232, 239, 242, 165, 0, 0,
	0, 0, 322, 0, 0, 0, 111, 0, 319, 0,
	0, 0, 137, 362, 139, 0, 0, 211, 153, 0,
	0, 0, 0, 353, 354, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 0, 320, 341, 340, 343,
	344, 345, 346, 0, 0, 101, 342, 347, 348, 349,
	0, 0, 0, 317, 334, 0, 361, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 331, 332, 0, 0,
	0, 0, 375, 0, 333, 0, 0, 328, 329, 330,
	335, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	119, 0, 0, 0, 0, 265, 0, 0, 373, 0,
	184, 0, 215, 122, 136, 97, 83, 93, 0, 121,
	162, 191, 195, 0, 0, 0, 105, 0, 193, 172,
	231, 0, 174, 192, 140, 221, 185, 230, 240, 241,
	218, 238, 245, 208, 86, 217, 229, 102, 203, 88,
	227, 214, 151, 131, 132, 87, 0, 189, 110, 117,
	107, 164, 224, 225, 106, 248, 94, 237, 90, 95,
	236, 158, 220, 228, 152, 145, 89, 226, 150, 144,
	135, 114, 124, 182, 142, 183, 125, 155, 154, 156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 234, 249,
	99, 0, 219, 243, 244, 0, 0, 100, 118, 113,
	0, 181, 157, 96, 127, 209, 134, 141, 188, 247,
	171, 194, 103, 233, 210, 363, 374, 369, 370, 367,
	368, 366, 365, 364, 376, 355, 356, 357, 358, 360,
	0, 371, 372, 359, 82, 91, 138, 246, 186, 116,
	235, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 85, 92, 98,
	104, 108, 112, 115, 120, 123, 126, 128, 129, 130,
	133, 143, 146, 147, 148, 149, 159, 160, 161, 163,
	166, 167, 168, 169, 170, 173, 175, 176, 177, 178,
	179, 180, 187, 190, 196, 197, 198, 199, 200, 201,
	202, 204, 205, 206, 207, 213, 216, 222, 223, 232,
	239, 242, 165, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 137, 362, 139,
	0, 0, 211, 153, 0, 0, 0, 0, 353, 354,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 320, 341, 340, 343, 344, 345, 346, 0, 0,
	101, 342, 347, 348, 349, 0, 0, 0, 0, 334,
	0, 361, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 331, 332, 0, 0, 0, 0, 375, 0, 333,
	0, 0, 328, 329, 330, 335, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 0,
	265, 0, 0, 373, 0, 184, 0, 215, 122, 136,
	97, 83, 93, 0, 121, 162, 191, 195, 0, 0,
	0, 105, 0, 193, 172, 231, 1557, 174, 192, 140,
	221, 185, 230, 240, 241, 218, 238, 245, 208, 86,
	217, 229, 102, 203, 88, 227, 214, 151, 131, 132,
	87, 0, 189, 110, 117, 107, 164, 224, 225, 106,
	248, 94, 237, 90, 95, 236, 158, 220, 228, 152,
	145, 89, 226, 150, 144, 135, 114, 124, 182, 142,
	183, 125, 155, 154, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 234, 249, 99, 0, 219, 243, 244,
	0, 0, 100, 118, 113, 0, 181, 157, 96, 127,
	209, 134, 141, 188, 247, 171, 194, 103, 233, 210,
	363, 374, 369, 370, 367, 368, 366, 365, 364, 376,
	355, 356, 357, 358, 360, 0, 371, 372, 359, 82,
	91, 138, 246, 186, 116, 235, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 85, 92, 98, 104, 108, 112, 115, 120,
	123, 126, 128, 129, 130, 133, 143, 146, 147, 148,
	149, 159, 160, 161, 163, 166, 167, 168, 169, 170,
	173, 175, 176, 177, 178, 179, 180, 187, 190, 196,
	197, 198, 199, 200, 201, 202, 204, 205, 206, 207,
	213, 216, 222, 223, 232, 239, 242, 165, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 0, 0,
	0, 0, 137, 362, 139, 0, 0, 211, 153, 0,
	0, 0, 0, 353, 354, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 576, 320, 341, 340, 343,
	344, 345, 346, 0, 0, 101, 342, 347, 348, 349,
	0, 0, 0, 0, 334, 0, 361, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 331, 332, 0, 0,
	0, 0, 375, 0, 333, 0, 0, 328, 329, 330,
	335, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	119, 0, 0, 0, 0, 265, 0, 0, 373, 0,
	184, 0, 215, 122, 136, 97, 83, 93, 0, 121,
	162, 191, 195, 0, 0, 0, 105, 0, 193, 172,
	231, 0, 174, 192, 140, 221, 185, 230, 240, 241,
	218, 238, 245, 208, 86, 217, 229, 102, 203, 88,
	227, 214, 151, 131, 132, 87, 0, 189, 110, 117,
	107, 164, 224, 225, 106, 248, 94, 237, 90, 95,
	236, 158, 220, 228, 152, 145, 89, 226, 150, 144,
	135, 114, 124, 182, 142, 183, 125, 155, 154, 156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 234, 249,
	99, 0, 219, 243, 244, 0, 0, 100, 118, 113,
	0, 181, 157, 96, 127, 209, 134, 141, 188, 247,
	171, 194, 103, 233, 210, 363, 374, 369, 370, 367,
	368, 366, 365, 364, 376, 355, 356, 357, 358, 360,
	0, 371, 372, 359, 82, 91, 138, 246, 186, 116,
	235, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 85, 92, 98,
	104, 108, 112, 115, 120, 123, 126, 128, 129, 130,
	133, 143, 146, 147, 148, 149, 159, 160, 161, 163,
	166, 167, 168, 169, 170, 173, 175, 176, 177, 178,
	179, 180, 187, 190, 196, 197, 198, 199, 200, 201,
	202, 204, 205, 206, 207, 213, 216, 222, 223, 232,
	239, 242, 165, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 137, 362, 139,
	0, 0, 211, 153, 0, 0, 0, 0, 353, 354,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 320, 341, 340, 343, 344, 345, 346, 0, 0,
	101, 342, 347, 348, 349, 0, 0, 0, 0, 334,
	0, 361, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 331, 332, 0, 0, 0, 0, 375, 0, 333,
	0, 0, 328, 329, 330, 335, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 0,
	265, 0, 0, 373, 0, 184, 0, 215, 122, 136,
	97, 83, 93, 0, 121, 162, 191, 195, 0, 0,
	0, 105, 0, 193, 172, 231, 0, 174, 192, 140,
	221, 185, 230, 240, 241, 218, 238, 245, 208, 86,
	217, 229, 102, 203, 88, 227, 214, 151, 131, 132,
	87, 0, 189, 110, 117, 107, 164, 224, 225, 106,
	248, 94, 237, 90, 95, 236, 158, 220, 228, 152,
	145, 89, 226, 150, 144, 135, 114, 124, 182, 142,
	183, 125, 155, 154, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 234, 249, 99, 0, 219, 243, 244,
	0, 0, 100, 118, 113, 0, 181, 157, 96, 127,
	209, 134, 141, 188, 247, 171, 194, 103, 233, 210,
	363, 374, 369, 370, 367, 368, 366, 365, 364, 376,
	355, 356, 357, 358, 360, 0, 371, 372, 359, 82,
	91, 138, 246, 186, 116, 235, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 85, 92, 98, 104, 108, 112, 115, 120,
	123, 126, 128, 129, 130, 133, 143, 146, 147, 148,
	149, 159, 160, 161, 163, 166, 167, 168, 169, 170,
	173, 175, 176, 177, 178, 179, 180, 187, 190, 196,
	197, 198, 199, 200, 201, 202, 204, 205, 206, 207,
	213, 216, 222, 223, 232, 239, 242, 165, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 0, 0,
	0, 0, 137, 0, 139, 0, 0, 211, 153, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 80, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 610, 609, 619, 620, 612, 613, 614, 615,
	616, 617, 618, 611, 0, 0, 621, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	119, 0, 0, 0, 0, 265, 0, 0, 0, 0,
	184, 0, 215, 122, 136, 97, 83, 93, 0, 121,
	162, 191, 195, 0, 0, 0, 105, 0, 193, 172,
	231, 0, 174, 192, 140, 221, 185, 230, 240, 241,
	218, 238, 245, 208, 86, 217, 229, 102, 203, 88,
	227, 214, 151, 131, 132, 87, 0, 189, 110, 117,
	107, 164, 224, 225, 106, 248, 94, 237, 90, 95,
	236, 158, 220, 228, 152, 145, 89, 226, 150, 144,
	135, 114, 124, 182, 142, 183, 125, 155, 154, 156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 234, 249,
	99, 0, 219, 243, 244, 0, 0, 100, 118, 113,
	0, 181, 157, 96, 127, 209, 134, 141, 188, 247,
	171, 194, 103, 233, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 91, 138, 246, 186, 116,
	235, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 85, 92, 98,
	104, 108, 112, 115, 120, 123, 126, 128, 129, 130,
	133, 143, 146, 147, 148, 149, 159, 160, 161, 163,
	166, 167, 168, 169, 170, 173, 175, 176, 177, 178,
	179, 180, 187, 190, 196, 197, 198, 199, 200, 201,
	202, 204, 205, 206, 207, 213, 216, 222, 223, 232,
	239, 242, 165, 0, 0, 0, 598, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 137, 0, 139,
	0, 0, 211, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 80, 0, 600, 0, 0, 0, 0, 0, 0,
	101, 0, 0, 0, 0, 0, 595, 594, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 596, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 0,
	265, 0, 0, 0, 0, 184, 0, 215, 122, 136,
	97, 83, 93, 0, 121, 162, 191, 195, 0, 0,
	0, 105, 0, 193, 172, 231, 0, 174, 192, 140,
	221, 185, 230, 240, 241, 218, 238, 245, 208, 86,
	217, 229, 102, 203, 88, 227, 214, 151, 131, 132,
	87, 0, 189, 110, 117, 107, 164, 224, 225, 106,
	248, 94, 237, 90, 95, 236, 158, 220, 228, 152,
	145, 89, 226, 150, 144, 135, 114, 124, 182, 142,
	183, 125, 155, 154, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 234, 249, 99, 0, 219, 243, 244,
	0, 0, 100, 118, 113, 0, 181, 157, 96, 127,
	209, 134, 141, 188, 247, 171, 194, 103, 233, 210,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	91, 138, 246, 186, 116, 235, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 85, 92, 98, 104, 108, 112, 115, 120,
	123, 126, 128, 129, 130, 133, 143, 146, 147, 148,
	149, 159, 160, 161, 163, 166, 167, 168, 169, 170,
	173, 175, 176, 177, 178, 179, 180, 187, 190, 196,
	197, 198, 199, 200, 201, 202, 204, 205, 206, 207,
	213, 216, 222, 223, 232, 239, 242, 165, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 0, 0,
	0, 0, 137, 0, 139, 0, 0, 211, 153, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 80, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 0, 0, 0, 0,
	0, 74, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	119, 76, 77, 0, 0, 73, 0, 0, 0, 78,
	184, 0, 215, 122, 136, 97, 83, 93, 0, 121,
	162, 191, 195, 0, 0, 0, 105, 0, 193, 172,
	231, 0, 174, 192, 140, 221, 185, 230, 240, 241,
	218, 238, 245, 208, 86, 217, 229, 102, 203, 88,
	227, 214, 151, 131, 132, 87, 0, 189, 110, 117,
	107, 164, 224, 225, 106, 248, 94, 237, 90, 95,
	236, 158, 220, 228, 152, 145, 89, 226, 150, 144,
	135, 114, 124, 182, 142, 183, 125, 155, 154, 156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 234, 249,
	99, 0, 219, 243, 244, 0, 0, 100, 118, 113,
	0, 181, 157, 96, 127, 209, 134, 141, 188, 247,
	171, 194, 103, 233, 210, 0, 75, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 91, 138, 246, 186, 116,
	235, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 85, 92, 98,
	104, 108, 112, 115, 120, 123, 126, 128, 129, 130,
	133, 143, 146, 147, 148, 149, 159, 160, 161, 163,
	166, 167, 168, 169, 170, 173, 175, 176, 177, 178,
	179, 180, 187, 190, 196, 197, 198, 199, 200, 201,
	202, 204, 205, 206, 207, 213, 216, 222, 223, 232,
	239, 242, 165, 0, 0, 0, 945, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 137, 0, 139,
	0, 0, 211, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 263, 0, 947, 0, 0, 0, 0, 0, 0,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 0,
	265, 0, 0, 0, 0, 184, 0, 215, 122, 136,
	97, 83, 93, 0, 121, 162, 191, 195, 0, 0,
	0, 105, 0, 193, 172, 231, 0, 174, 192, 140,
	221, 185, 230, 240, 241, 218, 238, 245, 208, 86,
	217, 229, 102, 203, 88, 227, 214, 151, 131, 132,
	87, 0, 189, 110, 117, 107, 164, 224, 225, 106,
	248, 94, 237, 90, 95, 236, 158, 220, 228, 152,
	145, 89, 226, 150, 144, 135, 114, 124, 182, 142,
	183, 125, 155, 154, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 234, 249, 99, 0, 219, 243, 244,
	0, 0, 100, 118, 113, 0, 181, 157, 96, 127,
	209, 134, 141, 188, 247, 171, 194, 103, 233, 210,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	91, 138, 246, 186, 116, 235, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 85, 92, 98, 104, 108, 112, 115, 120,
	123, 126, 128, 129, 130, 133, 143, 146, 147, 148,
	149, 159, 160, 161, 163, 166, 167, 168, 169, 170,
	173, 175, 176, 177, 178, 179, 180, 187, 190, 196,
	197, 198, 199, 200, 201, 202, 204, 205, 206, 207,
	213, 216, 222, 223, 232, 239, 242, 24, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 165,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	0, 0, 0, 0, 137, 0, 139, 0, 0, 211,
	153, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 0, 80, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 119, 0, 0, 0, 0, 265, 0, 0,
	0, 0, 184, 0, 215, 122, 136, 97, 83, 93,
	0, 121, 162, 191, 195, 0, 0, 0, 105, 0,
	193, 172, 231, 0, 174, 192, 140, 221, 185, 230,
	240, 241, 218, 238, 245, 208, 86, 217, 229, 102,
	203, 88, 227, 214, 151, 131, 132, 87, 0, 189,
	110, 117, 107, 164, 224, 225, 106, 248, 94, 237,
	90, 95, 236, 158, 220, 228, 152, 145, 89, 226,
	150, 144, 135, 114, 124, 182, 142, 183, 125, 155,
	154, 156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	234, 249, 99, 0, 219, 243, 244, 0, 0, 100,
	118, 113, 0, 181, 157, 96, 127, 209, 134, 141,
	188, 247, 171, 194, 103, 233, 210, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 91, 138, 246,
	186, 116, 235, 0, 0, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 85,
	92, 98, 104, 108, 112, 115, 120, 123, 126, 128,
	129, 130, 133, 143, 146, 147, 148, 149, 159, 160,
	161, 163, 166, 167, 168, 169, 170, 173, 175, 176,
	177, 178, 179, 180, 187, 190, 196, 197, 198, 199,
	200, 201, 202, 204, 205, 206, 207, 213, 216, 222,
	223, 232, 239, 242, 24, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 165, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 0, 0, 0,
	0, 137, 0, 139, 0, 0, 211, 153, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 0, 691, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 119,
	0, 0, 0, 0, 265, 0, 0, 0, 0, 184,
	0, 215, 122, 136, 97, 83, 93, 0, 121, 162,
	191, 195, 0, 0, 0, 105, 0, 193, 172, 231,
	0, 174, 192, 140, 221, 185, 230, 240, 241, 218,
	238, 245, 208, 86, 217, 229, 102, 203, 88, 227,
	214, 151, 131, 132, 87, 0, 189, 110, 117, 107,
	164, 224, 225, 106, 248, 94, 237, 90, 95, 236,
	158, 220, 228, 152, 145, 89, 226, 150, 144, 135,
	114, 124, 182, 142, 183, 125, 155, 154, 156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 234, 249, 99,
	0, 219, 243, 244, 0, 0, 100, 118, 113, 0,
	181, 157, 96, 127, 209, 134, 141, 188, 247, 171,
	194, 103, 233, 210, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 91, 138, 246, 186, 116, 235,
	0, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 85, 92, 98, 104,
	108, 112, 115, 120, 123, 126, 128, 129, 130, 133,
	143, 146, 147, 148, 149, 159, 160, 161, 163, 166,
	167, 168, 169, 170, 173, 175, 176, 177, 178, 179,
	180, 187, 190, 196, 197, 198, 199, 200, 201, 202,
	204, 205, 206, 207, 213, 216, 222, 223, 232, 239,
	242, 165, 0, 0, 0, 945, 0, 0, 0, 0,
	111, 0, 0, 0, 0, 0, 137, 0, 139, 0,
	0, 211, 153, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	263, 0, 947, 0, 0, 0, 0, 0, 0, 101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 119, 0, 0, 0, 0, 265,
	0, 0, 0, 0, 184, 0, 215, 122, 136, 97,
	83, 93, 0, 121, 162, 191, 195, 0, 0, 0,
	105, 0, 193, 172, 231, 0, 943, 192, 140, 221,
	185, 230, 240, 241, 218, 238, 245, 208, 86, 217,
	229, 102, 203, 88, 227, 214, 151, 131, 132, 87,
	0, 189, 110, 117, 107, 164, 224, 225, 106, 248,
	94, 237, 90, 95, 236, 158, 220, 228, 152, 145,
	89, 226, 150, 144, 135, 114, 124, 182, 142, 183,
	125, 155, 154, 156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 234, 249, 99, 0, 219, 243, 244, 0,
	0, 100, 118, 113, 0, 181, 157, 96, 127, 209,
	134, 141, 188, 247, 171, 194, 103, 233, 210, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 91,
	138, 246, 186, 116, 235, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 85, 92, 98, 104, 108, 112, 115, 120, 123,
	126, 128, 129, 130, 133, 143, 146, 147, 148, 149,
	159, 160, 161, 163, 166, 167, 168, 169, 170, 173,
	175, 176, 177, 178, 179, 180, 187, 190, 196, 197,
	198, 199, 200, 201, 202, 204, 205, 206, 207, 213,
	216, 222, 223, 232, 239, 242, 165, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 0, 0, 0,
	0, 137, 0, 139, 0, 0, 211, 153, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 80, 0, 0, 839, 0,
	0, 840, 0, 0, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 119,
	0, 0, 0, 0, 265, 0, 0, 0, 0, 184,
	0, 215, 122, 136, 97, 83, 93, 0, 121, 162,
	191, 195, 0, 0, 0, 105, 0, 193, 172, 231,
	0, 174, 192, 140, 221, 185, 230, 240, 241, 218,
	238, 245, 208, 86, 217, 229, 102, 203, 88, 227,
	214, 151, 131, 132, 87, 0, 189, 110, 117, 107,
	164, 224, 225, 106, 248, 94, 237, 90, 95, 236,
	158, 220, 228, 152, 145, 89, 226, 150, 144, 135,
	114, 124, 182, 142, 183, 125, 155, 154, 156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 234, 249, 99,
	0, 219, 243, 244, 0, 0, 100, 118, 113, 0,
	181, 157, 96, 127, 209, 134, 141, 188, 247, 171,
	194, 103, 233, 210, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 91, 138, 246, 186, 116, 235,
	0, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 85, 92, 98, 104,
	108, 112, 115, 120, 123, 126, 128, 129, 130, 133,
	143, 146, 147, 148, 149, 159, 160, 161, 163, 166,
	167, 168, 169, 170, 173, 175, 176, 177, 178, 179,
	180, 187, 190, 196, 197, 198, 199, 200, 201, 202,
	204, 205, 206, 207, 213, 216, 222, 223, 232, 239,
	242, 165, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 713, 0, 0, 0, 137, 0, 139, 0,
	0, 211, 153, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	80, 0, 712, 0, 0, 0, 0, 0, 0, 101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 119, 0, 0, 0, 0, 265,
	0, 0, 0, 0, 184, 0, 215, 122, 136, 97,
	83, 93, 0, 121, 162, 191, 195, 0, 0, 0,
	105, 0, 193, 172, 231, 0, 174, 192, 140, 221,
	185, 230, 240, 241, 218, 238, 245, 208, 86, 217,
	229, 102, 203, 88, 227, 214, 151, 131, 132, 87,
	0, 189, 110, 117, 107, 164, 224, 225, 106, 248,
	94, 237, 90, 95, 236, 158, 220, 228, 152, 145,
	89, 226, 150, 144, 135, 114, 124, 182, 142, 183,
	125, 155, 154, 156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 234, 249, 99, 0, 219, 243, 244, 0,
	0, 100, 118, 113, 0, 181, 157, 96, 127, 209,
	134, 141, 188, 247, 171, 194, 103, 233, 210, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 91,
	138, 246, 186, 116, 235, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 85, 92, 98, 104, 108, 112, 115, 120, 123,
	126, 128, 129, 130, 133, 143, 146, 147, 148, 149,
	159, 160, 161, 163, 166, 167, 168, 169, 170, 173,
	175, 176, 177, 178, 179, 180, 187, 190, 196, 197,
	198, 199, 200, 201, 202, 204, 205, 206, 207, 213,
	216, 222, 223, 232, 239, 242, 165, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 0, 0, 0,
	0, 137, 0, 139, 0, 0, 211, 153, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 0, 691, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 119,
	0, 0, 0, 0, 265, 0, 0, 0, 0, 184,
	0, 215, 122, 136, 97, 83, 93, 0, 121, 162,
	191, 195, 0, 0, 0, 105, 0, 193, 172, 231,
	0, 174, 192, 140, 221, 185, 230, 240, 241, 218,
	238, 245, 208, 86, 217, 229, 102, 203, 88, 227,
	214, 151, 131, 132, 87, 0, 189, 110, 117, 107,
	164, 224, 225, 106, 248, 94, 237, 90, 95, 236,
	158, 220, 228, 152, 145, 89, 226, 150, 144, 135,
	114, 124, 182, 142, 183, 125, 155, 154, 156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 234, 249, 99,
	0, 219, 243, 244, 0, 0, 100, 118, 113, 0,
	181, 157, 96, 127, 209, 134, 141, 188, 247, 171,
	194, 103, 233, 210, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 91, 138, 246, 186, 116, 235,
	0, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 85, 92, 98, 104,
	108, 112, 115, 120, 123, 126, 128, 129, 130, 133,
	143, 146, 147, 148, 149, 159, 160, 161, 163, 166,
	167, 168, 169, 170, 173, 175, 176, 177, 178, 179,
	180, 187, 190, 196, 197, 198, 199, 200, 201, 202,
	204, 205, 206, 207, 213, 216, 222, 223, 232, 239,
	242, 165, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 0, 0, 0, 0, 137, 0, 139, 0,
	0, 211, 153, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	263, 0, 947, 0, 0, 0, 0, 0, 0, 101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 119, 0, 0, 0, 0, 265,
	0, 0, 0, 0, 184, 0, 215, 122, 136, 97,
	83, 93, 0, 121, 162, 191, 195, 0, 0, 0,
	105, 0, 193, 172, 231, 0, 174, 192, 140, 221,
	185, 230, 240, 241, 218, 238, 245, 208, 86, 217,
	229, 102, 203, 88, 227, 214, 151, 131, 132, 87,
	0, 189, 110, 117, 107, 164, 224, 225, 106, 248,
	94, 237, 90, 95, 236, 158, 220, 228, 152, 145,
	89, 226, 150, 144, 135, 114, 124, 182, 142, 183,
	125, 155, 154, 156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 234, 249, 99, 0, 219, 243, 244, 0,
	0, 100, 118, 113, 0, 181, 157, 96, 127, 209,
	134, 141, 188, 247, 171, 194, 103, 233, 210, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 91,
	138, 246, 186, 116, 235, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 85, 92, 98, 104, 108, 112, 115, 120, 123,
	126, 128, 129, 130, 133, 143, 146, 147, 148, 149,
	159, 160, 161, 163, 166, 167, 168, 169, 170, 173,
	175, 176, 177, 178, 179, 180, 187, 190, 196, 197,
	198, 199, 200, 201, 202, 204, 205, 206, 207, 213,
	216, 222, 223, 232, 239, 242, 165, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 0, 0, 0,
	0, 137, 0, 139, 0, 0, 211, 153, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 80, 0, 600, 0, 0,
	0, 0, 0, 0, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 119,
	0, 0, 0, 0, 265, 0, 0, 0, 0, 184,
	0, 215, 122, 136, 97, 83, 93, 0, 121, 162,
	191, 195, 0, 0, 0, 105, 0, 193, 172, 231,
	0, 174, 192, 140, 221, 185, 230, 240, 241, 218,
	238, 245, 208, 86, 217, 229, 102, 203, 88, 227,
	214, 151, 131, 132, 87, 0, 189, 110, 117, 107,
	164, 224, 225, 106, 248, 94, 237, 90, 95, 236,
	158, 220, 228, 152, 145, 89, 226, 150, 144, 135,
	114, 124, 182, 142, 183, 125, 155, 154, 156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 234, 249, 99,
	0, 219, 243, 244, 0, 0, 100, 118, 113, 0,
	181, 157, 96, 127, 209, 134, 141, 188, 247, 171,
	194, 103, 233, 210, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 91, 138, 246, 186, 116, 235,
	0, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 85, 92, 98, 104,
	108, 112, 115, 120, 123, 126, 128, 129, 130, 133,
	143, 146, 147, 148, 149, 159, 160, 161, 163, 166,
	167, 168, 169, 170, 173, 175, 176, 177, 178, 179,
	180, 187, 190, 196, 197, 198, 199, 200, 201, 202,
	204, 205, 206, 207, 213, 216, 222, 223, 232, 239,
	242, 165, 0, 0, 0, 0, 0, 0, 0, 682,
	111, 0, 0, 0, 0, 0, 137, 0, 139, 0,
	0, 211, 153, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	263, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 119, 0, 0, 0, 0, 265,
	0, 0, 0, 0, 184, 0, 215, 122, 136, 97,
	83, 93, 0, 121, 162, 191, 195, 0, 0, 0,
	105, 0, 193, 172, 231, 0, 174, 192, 140, 221,
	185, 230, 240, 241, 218, 238, 245, 208, 86, 217,
	229, 102, 203, 88, 227, 214, 151, 131, 132, 87,
	0, 189, 110, 117, 107, 164, 224, 225, 106, 248,
	94, 237, 90, 95, 236, 158, 220, 228, 152, 145,
	89, 226, 150, 144, 135, 114, 124, 182, 142, 183,
	125, 155, 154, 156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 234, 249, 99, 0, 219, 243, 244, 0,
	0, 100, 118, 113, 0, 181, 157, 96, 127, 209,
	134, 141, 188, 247, 171, 194, 103, 233, 210, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 91,
	138, 246, 186, 116, 235, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 85, 92, 98, 104, 108, 112, 115, 120, 123,
	126, 128, 129, 130, 133, 143, 146, 147, 148, 149,
	159, 160, 161, 163, 166, 167, 168, 169, 170, 173,
	175, 176, 177, 178, 179, 180, 187, 190, 196, 197,
	198, 199, 200, 201, 202, 204, 205, 206, 207, 213,
	216, 222, 223, 232, 239, 242, 379, 0, 0, 0,
	0, 0, 0, 165, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 0, 0, 0, 0, 137, 0,
	139, 0, 0, 211, 153, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 263, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 119, 0, 0, 0,
	0, 265, 0, 0, 0, 0, 184, 0, 215, 122,
	136, 97, 83, 93, 0, 121, 162, 191, 195, 0,
	0, 0, 105, 0, 193, 172, 231, 0, 174, 192,
	140, 221, 185, 230, 240, 241, 218, 238, 245, 208,
	86, 217, 229, 102, 203, 88, 227, 214, 151, 131,
	132, 87, 0, 189, 110, 117, 107, 164, 224, 225,
	106, 248, 94, 237, 90, 95, 236, 158, 220, 228,
	152, 145, 89, 226, 150, 144, 135, 114, 124, 182,
	142, 183, 125, 155, 154, 156, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 234, 249, 99, 0, 219, 243,
	244, 0, 0, 100, 118, 113, 0, 181, 157, 96,
	127, 209, 134, 141, 188, 247, 171, 194, 103, 233,
	210, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 91, 138, 246, 186, 116, 235, 0, 0, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 85, 92, 98, 104, 108, 112, 115,
	120, 123, 126, 128, 129, 130, 133, 143, 146, 147,
	148, 149, 159, 160, 161, 163, 166, 167, 168, 169,
	170, 173, 175, 176, 177, 178, 179, 180, 187, 190,
	196, 197, 198, 199, 200, 201, 202, 204, 205, 206,
	207, 213, 216, 222, 223, 232, 239, 242, 165, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 0,
	0, 0, 0, 137, 0, 139, 0, 0, 211, 153,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 263, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 0, 260, 0, 0, 265, 0, 0, 0,
	0, 184, 0, 215, 122, 136, 97, 83, 93, 0,
	121, 162, 191, 195, 0, 0, 0, 105, 0, 193,
	172, 231, 0, 174, 192, 140, 221, 185, 230, 240,
	241, 218, 238, 245, 208, 86, 217, 229, 102, 203,
	88, 227, 214, 151, 131, 132, 87, 0, 189, 110,
	117, 107, 164, 224, 225, 106, 248, 94, 237, 90,
	95, 236, 158, 220, 228, 152, 145, 89, 226, 150,
	144, 135, 114, 124, 182, 142, 183, 125, 155, 154,
	156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 234,
	249, 99, 0, 219, 243, 244, 0, 0, 100, 118,
	113, 0, 181, 157, 96, 127, 209, 134, 141, 188,
	247, 171, 194, 103, 233, 210, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 91, 138, 246, 186,
	116, 235, 0, 0, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 85, 92,
	98, 104, 108, 112, 115, 120, 123, 126, 128, 129,
	130, 133, 143, 146, 147, 148, 149, 159, 160, 161,
	163, 166, 167, 168, 169, 170, 173, 175, 176, 177,
	178, 179, 180, 187, 190, 196, 197, 198, 199, 200,
	201, 202, 204, 205, 206, 207, 213, 216, 222, 223,
	232, 239, 242, 165, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 0, 0, 0, 0, 137, 0,
	139, 0, 0, 211, 153, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 80, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 119, 0, 0, 0,
	0, 265, 0, 0, 0, 0, 184, 0, 215, 122,
	136, 97, 83, 93, 0, 121, 162, 191, 195, 0,
	0, 0, 105, 0, 193, 172, 231, 0, 174, 192,
	140, 221, 185, 230, 240, 241, 218, 238, 245, 208,
	86, 217, 229, 102, 203, 88, 227, 214, 151, 131,
	132, 87, 0, 189, 110, 117, 107, 164, 224, 225,
	106, 248, 94, 237, 90, 95, 236, 158, 220, 228,
	152, 145, 89, 226, 150, 144, 135, 114, 124, 182,
	142, 183, 125, 155, 154, 156, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 234, 249, 99, 0, 219, 243,
	244, 0, 0, 100, 118, 113, 0, 181, 157, 96,
	127, 209, 134, 141, 188, 247, 171, 194, 103, 233,
	210, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 91, 138, 246, 186, 116, 235, 0, 0, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 85, 92, 98, 104, 108, 112, 115,
	120, 123, 126, 128, 129, 130, 133, 143, 146, 147,
	148, 149, 159, 160, 161, 163, 166, 167, 168, 169,
	170, 173, 175, 176, 177, 178, 179, 180, 187, 190,
	196, 197, 198, 199, 200, 201, 202, 204, 205, 206,
	207, 213, 216, 222, 223, 232, 239, 242, 165, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 0,
	0, 0, 0, 137, 0, 139, 0, 0, 211, 153,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 263, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 0, 0, 0, 0, 265, 0, 0, 0,
	0, 184, 0, 215, 122, 136, 97, 83, 93, 0,
	121, 162, 191, 195, 0, 0, 0, 105, 0, 193,
	172, 231, 0, 174, 192, 140, 221, 185, 230, 240,
	241, 218, 238, 245, 208, 86, 217, 229, 102, 203,
	88, 227, 214, 151, 131, 132, 87, 0, 189, 110,
	117, 107, 164, 224, 225, 106, 248, 94, 237, 90,
	95, 236, 158, 220, 228, 152, 145, 89, 226, 150,
	144, 135, 114, 124, 182, 142, 183, 125, 155, 154,
	156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 234,
	249, 99, 0, 219, 243, 244, 0, 0, 100, 118,
	113, 0, 181, 157, 96, 127, 209, 134, 141, 188,
	247, 171, 194, 103, 233, 210, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 91, 138, 246, 186,
	116, 235, 0, 0, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 85, 92,
	98, 104, 108, 112, 115, 120, 123, 126, 128, 129,
	130, 133, 143, 146, 147, 148, 149, 159, 160, 161,
	163, 166, 167, 168, 169, 170, 173, 175, 176, 177,
	178, 179, 180, 187, 190, 196, 197, 198, 199, 200,
	201, 202, 204, 205, 206, 207, 213, 216, 222, 223,
	232, 239, 242, 165, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 0, 0, 0, 0, 137, 0,
	139, 0, 0, 211, 153, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 320, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 119, 0, 0, 0,
	0, 265, 0, 0, 0, 0, 184, 0, 215, 122,
	136, 97, 83, 93, 0, 121, 162, 191, 195, 0,
	0, 0, 105, 0, 193, 172, 231, 0, 174, 192,
	140, 221, 185, 230, 240, 241, 218, 238, 245, 208,
	86, 217, 229, 102, 203, 88, 227, 214, 151, 131,
	132, 87, 0, 189, 110, 117, 107, 164, 224, 225,
	106, 248, 94, 237, 90, 95, 236, 158, 220, 228,
	152, 145, 89, 226, 150, 144, 135, 114, 124, 182,
	142, 183, 125, 155, 154, 156, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 234, 249, 99, 0, 219, 243,
	244, 0, 0, 100, 118, 113, 0, 181, 157, 96,
	127, 209, 134, 141, 188, 247, 171, 194, 103, 233,
	210, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 91, 138, 246, 186, 116, 235, 0, 0, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 85, 92, 98, 104, 108, 112, 115,
	120, 123, 126, 128, 129, 130, 133, 143, 146, 147,
	148, 149, 159, 160, 161, 163, 166, 167, 168, 169,
	170, 173, 175, 176, 177, 178, 179, 180, 187, 190,
	196, 197, 198, 199, 200, 201, 202, 204, 205, 206,
	207, 213, 216, 222, 223, 232, 239, 242,
}
var yyPact = [...]int{

	1655, -1000, -283, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 994, 1041, -1000, -1000, -1000, -1000, -1000, -1000,
	274, 11679, 21, 137, -7, 15850, 134, 123, 16540, -1000,
	15, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -79, -89,
	-1000, 784, -1000, -1000, -1000, -1000, -1000, 977, 992, 801,
	972, 891, -1000, 8217, 114, 114, 15505, 6492, -1000, -1000,
	259, 16540, 129, 16540, -170, 105, 105, 105, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	121, 16540, 275, -1000, 16540, 100, 661, 100, 100, 100,
	16540, -1000, 188, -1000, -1000, -1000, 16540, 635, 921, 3270,
	67, 3270, -1000, 3270, 3270, -1000, 3270, 22, 3270, -87,
	1008, 30, -24, -1000, 3270, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 590, 926,
	9609, 9609, 994, -1000, 784, -1000, -1000, -1000, 919, -1000,
	-1000, 389, 1025, -1000, 11334, 187, -1000, 9609, 1872, 755,
	-1000, -1000, 755, -1000, -1000, 174, -1000, -1000, 10644, 10644,
	10644, 10644, 10644, 10644, 10644, 10644, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	755, -1000, 9264, 755, 755, 755, 755, 755, 755, 755,
	755, 9609, 755, 755, 755, 755, 755, 755, 755, 755,
	755, 755, 755, 755, 755, 755, 755, 15153, 14118, 16540,
	762, 728, -1000, -1000, 179, 768, 6134, -104, -1000, -1000,
	-1000, 292, 13773, -1000, -1000, -1000, 918, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 676, 16540, -1000, 2272, -1000,
	618, 3270, 117, 616, 337, 612, 16540, 16540, 3270, 54,
	71, 68, 16540, 775, 112, 16540, 957, 858, 16540, 603,
	579, -1000, 5776, -1000, 3270, 3270, -1000, -1000, -1000, 3270,
	3270, 3270, 16540, 3270, 3270, -1000, -1000, -1000, -1000, 3270,
	3270, -1000, 1023, 318, -1000, -1000, -1000, -1000, 9609, 230,
	-1000, 857, -1000, -1000, -1000, -1000, -1000, -1000, 1036, 215,
	582, 178, 774, -1000, 524, 977, 590, 891, 13428, 869,
	-1000, -1000, 16540, -1000, 9609, 9609, 383, -1000, 14808, -1000,
	-1000, 4344, 232, 10644, 430, 306, 10644, 10644, 10644, 10644,
	10644, 10644, 10644, 10644, 10644, 10644, 10644, 10644, 10644, 10644,
	10644, 499, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	576, -1000, 784, 627, 627, 195, 195, 195, 195, 195,
	195, 195, 10989, 7527, 590, 673, 453, 9264, 8217, 8217,
	9609, 9609, 8907, 8562, 8217, 966, 313, 453, 16885, -1000,
	-1000, 10299, -1000, -1000, -1000, -1000, -1000, 590, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 16195, 16195, 8217, 8217, 8217,
	8217, 73, 16540, -1000, 744, 797, -1000, -1000, -1000, 960,
	12738, 755, 13083, 73, 769, 14118, 16540, -1000, -1000, 14118,
	16540, 3986, 5418, 768, -104, 749, -1000, -149, -112, 7182,
	194, -1000, -1000, -1000, -1000, -118, 192, 670, 107, -58,
	-1000, -1000, -1000, 781, -1000, 781, 781, 781, 781, -13,
	-13, -13, -13, -1000, -1000, -1000, -1000, -1000, 817, 816,
	815, 810, -1000, -1000, -1000, 781, 781, 781, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 806, 806, 806, 796, 796, 796,
	796, 830, -1000, 16540, -134, 956, 3270, -1000, 69, -1000,
	16540, 16540, 16540, 16540, 16540, 149, 16540, 16540, 764, -1000,
	16540, 3270, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 16540, 322, 16540,
	16540, 453, -1000, 543, 16540, -1000, 901, 9609, 9609, 5060,
	9609, -1000, -1000, -1000, 926, -1000, 966, 978, -1000, 910,
	909, 8217, -1000, -1000, 232, 264, -1000, -1000, 429, -1000,
	-1000, -1000, -1000, 177, 755, -1000, 1888, -1000, -1000, -1000,
	-1000, 430, 10644, 10644, 10644, 103, 1888, 2024, 1277, 375,
	195, 316, 316, 204, 204, 204, 204, 204, 647, 647,
	-1000, -1000, -1000, 590, -1000, -1000, -1000, 590, 8217, 761,
	-1000, -1000, 9609, -1000, 590, 666, 666, 448, 367, 293,
	1020, 666, 271, 1019, 666, 666, 8217, 363, -1000, 9609,
	590, -1000, 171, -1000, 411, 758, 757, 666, 590, 666,
	666, 752, 755, -1000, 16885, 14118, 14118, 14118, 14118, 14118,
	-1000, 880, 875, -1000, 873, 872, 879, 16540, -1000, 668,
	12738, 6837, 186, 755, -1000, 14463, -1000, -1000, 1004, 14118,
	730, -1000, 730, -1000, 169, -1000, -1000, 749, -104, -115,
	-1000, -1000, -1000, -1000, 453, -1000, 500, -1000, 288, -1000,
	-1000, -1000, 802, 561, -1000, 934, 237, 236, 555, 932,
	-1000, -1000, -1000, 924, -1000, 353, -1000, -60, -1000, -1000,
	472, -13, -13, -1000, -1000, 194, 917, 194, 194, 194,
	542, 542, 542, 542, -1000, -1000, -1000, -1000, 459, -1000,
	-1000, -1000, 440, -1000, -1000, -1000, 853, 16195, 3270, -1000,
	284, -1000, -1000, -1000, 269, 269, 256, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 64, 824,
	-1000, -1000, -1000, -1000, 14, 36, 108, -1000, 3270, -1000,
	318, -1000, 533, 9609, -1000, -1000, -1000, -1000, 898, 453,
	453, 164, -1000, -1000, 16540, -1000, -1000, -1000, -1000, 741,
	-1000, -1000, -1000, 3628, 8217, -1000, 103, 1888, 1962, -1000,
	10644, 10644, -1000, -1000, 666, 8217, 453, -1000, -1000, -1000,
	111, 499, 111, 10644, 10644, -1000, 10644, 10644, -1000, -182,
	721, 296, -1000, 9609, 451, -1000, 5060, -1000, 10644, 10644,
	-1000, -1000, -1000, -1000, 841, 16885, 755, -1000, 12381, 16195,
	756, -1000, 278, 797, 814, 839, 664, -1000, -1000, -1000,
	-1000, 874, -1000, 871, -1000, -1000, -1000, -1000, 590, 748,
	-1000, -1000, 453, 755, 755, -1000, 128, 122, 120, 16195,
	-1000, 994, 9609, 730, -1000, -1000, 207, -1000, -1000, -153,
	-132, -1000, -1000, -1000, 2912, 16195, 81, -1000, 555, 555,
	-1000, -1000, -1000, 800, 835, 10644, -1000, -1000, -1000, 628,
	194, 194, -1000, 248, -1000, -1000, -1000, 659, -1000, 643,
	625, 623, 745, 611, 16540, -1000, -1000, 2912, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 16540, -1000, -1000, -1000, -1000, -1000, 16195,
	-188, 553, 16195, 16195, 16195, 16540, -1000, 322, -1000, 453,
	-1000, 4702, -1000, 1004, 14118, -1000, -1000, 590, -1000, 10644,
	1888, 1888, -1000, -1000, 590, 781, 781, -1000, 781, 796,
	-1000, 781, 4, 781, 3, 590, 590, 1790, 1618, 1500,
	528, 755, -177, -1000, 453, 9609, -1000, 870, 331, -1000,
	948, 683, 700, -1000, -1000, 7872, 590, 609, 156, 601,
	-1000, 994, 16885, 9609, -1000, -1000, 9609, 795, -1000, 9609,
	-1000, -1000, -1000, 960, 6837, 14118, 16885, 755, 755, 755,
	601, 977, 453, -1000, -1000, -1000, -1000, 794, -1000, -1000,
	-1000, 595, -1000, 781, -1000, -1000, -1000, 16195, -52, 1030,
	1888, -1000, -1000, -1000, -1000, -1000, -13, 532, -13, -13,
	-13, 435, -1000, 420, 3270, -1000, -1000, -1000, -1000, -1000,
	952, -1000, 4702, -1000, -1000, 778, 827, -1000, -1000, -1000,
	1001, 734, -1000, 1888, -1000, -1000, 119, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 10644, 10644, 10644, 10644, 10644,
	590, 514, 453, 10644, 10644, 931, -1000, 755, -1000, -1000,
	754, 16195, 16195, -1000, 16195, 977, -1000, 453, 453, 16195,
	453, 16540, -1000, 852, 590, 16195, 16195, 16195, 12024, -1000,
	2912, 175, 16195, -1000, 593, -1000, 245, -1000, -131, 194,
	-1000, 194, 194, 194, 626, 602, -1000, 755, 722, -1000,
	265, 16195, 16540, 998, 979, -1000, -1000, 411, 411, 411,
	411, 65, -1000, -1000, 411, 411, 1029, -1000, 755, -1000,
	784, 150, -1000, -1000, -1000, 589, -1000, -1000, -1000, 586,
	586, 586, 186, 596, 175, -1000, 432, 263, 504, -1000,
	76, 16195, 370, 930, -1000, 928, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 63, 4702, 2912, 583, -1000, -1000, 9609,
	9609, -1000, -1000, -1000, -1000, 590, 43, -191, -1000, -1000,
	16885, 700, 590, 16195, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 398, -1000, -1000, 16540, -1000, -1000, 485, -1000,
	-1000, 560, -1000, 16195, -1000, -1000, 824, 453, 686, -1000,
	897, -186, -194, 682, -1000, -1000, -1000, 777, -1000, -1000,
	63, 908, -188, -1000, 894, -1000, 16195, -1000, 60, -1000,
	-189, 551, 58, -192, 833, 755, -197, 832, -1000, 1012,
	9954, -1000, -1000, 1028, 203, 203, 411, 590, -1000, -1000,
	-1000, 90, 473, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1264, 13, 535, 1259, 1254, 1253, 1252, 1251, 1250,
	1248, 1247, 1246, 1245, 1244, 1243, 1242, 1241, 1239, 1238,
	1237, 1236, 1234, 1231, 1229, 1228, 82, 1227, 1222, 1221,
	69, 1219, 71, 1217, 1216, 41, 208, 48, 40, 1051,
	1213, 34, 23, 105, 1212, 1209, 1208, 33, 1207, 1205,
	21, 1203, 1202, 1199, 75, 1197, 1196, 54, 1194, 1193,
	81, 1192, 58, 1191, 16, 64, 1186, 1184, 1183, 1181,
	70, 670, 1180, 1179, 15, 1177, 1176, 97, 1175, 56,
	6, 18, 42, 24, 1174, 114, 9, 1173, 53, 1172,
	1167, 1164, 1163, 35, 1162, 59, 1157, 19, 57, 1156,
	10, 76, 28, 27, 5, 77, 62, 1154, 25, 66,
	52, 1153, 1151, 538, 1149, 1148, 44, 1147, 1144, 30,
	1143, 113, 414, 1131, 1130, 1129, 1127, 51, 0, 711,
	17, 73, 1122, 1117, 1116, 1488, 38, 61, 20, 26,
	55, 1293, 43, 1114, 1111, 49, 1110, 1105, 1102, 1101,
	1100, 1096, 1092, 442, 1089, 1088, 1087, 120, 29, 1086,
	1082, 60, 47, 1081, 1080, 1078, 50, 63, 1077, 1075,
	46, 31, 1073, 1070, 1069, 1068, 8, 1067, 22, 1063,
	12, 1062, 37, 1061, 7, 1060, 11, 1059, 3, 1058,
	4, 45, 1, 1057, 2, 1056, 1048, 211, 188, 78,
	1047, 79,
}
var yyR1 = [...]int{

	0, 195, 196, 196, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 6, 3, 4,
	4, 5, 5, 7, 7, 29, 29, 8, 9, 9,
	9, 9, 199, 199, 54, 54, 55, 55, 101, 101,
	10, 10, 10, 10, 106, 106, 110, 110, 110, 111,
	111, 111, 111, 143, 143, 11, 11, 11, 11, 11,
	11, 11, 190, 190, 189, 188, 188, 187, 187, 186,
	17, 173, 175, 175, 174, 174, 174, 174, 167, 146,
	146, 146, 146, 149, 149, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 148, 148, 148, 148, 148, 148, 148, 150,
	150, 150, 150, 150, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 152, 152, 152, 152, 152, 152, 152,
	152, 166, 166, 153, 153, 161, 161, 162, 162, 162,
	159, 159, 160, 160, 163, 163, 163, 163, 155, 155,
	156, 156, 164, 164, 157, 157, 157, 158, 158, 158,
	165, 165, 165, 165, 165, 154, 154, 168, 168, 181,
	181, 180, 180, 180, 172, 172, 177, 177, 177, 177,
	177, 170, 170, 171, 171, 179, 179, 178, 169, 169,
	182, 182, 182, 182, 193, 194, 192, 192, 192, 192,
	192, 45, 45, 45, 46, 46, 176, 176, 176, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 185, 183, 183, 184,
	184, 13, 18, 18, 14, 14, 14, 14, 14, 15,
	15, 19, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	117, 117, 115, 115, 118, 118, 116, 116, 116, 119,
	119, 119, 120, 120, 144, 144, 144, 21, 21, 23,
	23, 24, 25, 22, 22, 22, 22, 22, 22, 22,
	16, 200, 26, 27, 27, 28, 28, 28, 32, 32,
	32, 30, 30, 31, 31, 37, 37, 36, 36, 38,
	38, 38, 38, 132, 132, 132, 131, 131, 40, 40,
	41, 41, 42, 42, 43, 43, 43, 43, 43, 43,
	63, 63, 52, 52, 51, 51, 50, 53, 53, 53,
	100, 100, 102, 102, 44, 44, 44, 44, 47, 47,
	48, 48, 49, 49, 139, 139, 138, 138, 138, 137,
	137, 56, 56, 56, 58, 57, 57, 57, 57, 59,
	59, 61, 61, 60, 60, 62, 64, 64, 64, 64,
	65, 65, 39, 39, 39, 39, 39, 39, 39, 114,
	114, 67, 67, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 78, 78, 78, 78, 78, 78, 68,
	68, 68, 68, 68, 68, 68, 35, 35, 79, 79,
	79, 85, 80, 80, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 75, 75, 75, 73,
	73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
	73, 73, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 201, 201,
	77, 76, 76, 76, 76, 76, 76, 33, 33, 33,
	33, 33, 142, 142, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 89, 89, 34,
	34, 87, 87, 88, 90, 90, 86, 86, 86, 70,
	70, 70, 70, 70, 70, 70, 70, 72, 72, 72,
	91, 91, 92, 92, 93, 93, 94, 94, 95, 96,
	96, 96, 97, 97, 97, 97, 98, 98, 98, 69,
	69, 69, 69, 69, 69, 99, 99, 99, 99, 103,
	103, 81, 81, 83, 83, 82, 84, 104, 104, 108,
	105, 105, 109, 109, 109, 109, 107, 107, 107, 134,
	134, 134, 112, 112, 121, 121, 122, 122, 113, 113,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	124, 124, 124, 125, 125, 126, 126, 126, 133, 133,
	129, 129, 130, 130, 135, 135, 136, 136, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 197, 198, 140, 141, 141, 141,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 4, 6, 7, 5, 10, 1,
	3, 1, 3, 7, 8, 1, 1, 9, 8, 7,
	6, 6, 1, 1, 1, 3, 1, 3, 0, 4,
	3, 4, 5, 4, 1, 3, 3, 2, 2, 2,
	2, 2, 1, 1, 1, 2, 2, 8, 4, 6,
	5, 5, 0, 2, 1, 0, 2, 1, 3, 3,
	4, 4, 2, 4, 1, 3, 3, 3, 8, 3,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 1, 4, 4, 2, 2, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 6, 6, 6,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 3, 0, 5, 0, 3, 5,
	0, 1, 0, 1, 0, 1, 2, 1, 0, 2,
	0, 3, 0, 1, 0, 3, 3, 0, 2, 2,
	0, 2, 1, 2, 1, 0, 2, 5, 4, 1,
	2, 2, 3, 2, 0, 1, 2, 3, 3, 2,
	2, 1, 1, 0, 1, 1, 3, 2, 3, 1,
	10, 11, 11, 12, 3, 3, 1, 1, 2, 2,
	2, 0, 3, 6, 0, 3, 1, 1, 1, 6,
	7, 7, 7, 7, 4, 5, 7, 5, 5, 5,
	12, 7, 5, 9, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 7, 1, 3, 8,
	8, 3, 3, 5, 4, 6, 5, 4, 4, 3,
	2, 3, 4, 4, 3, 4, 4, 4, 4, 4,
	4, 3, 2, 3, 3, 2, 3, 4, 3, 7,
	5, 4, 2, 4, 4, 3, 3, 5, 2, 3,
	1, 1, 0, 1, 1, 1, 0, 2, 2, 0,
	2, 2, 0, 2, 0, 1, 1, 2, 1, 1,
	2, 1, 1, 2, 2, 2, 2, 2, 3, 3,
	2, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 1, 0, 2,
	1, 3, 1, 1, 1, 3, 1, 3, 5, 6,
	3, 7, 0, 1, 1, 3, 1, 1, 4, 4,
	1, 3, 1, 3, 4, 4, 4, 3, 2, 4,
	0, 1, 0, 2, 0, 1, 0, 1, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 3, 0, 5, 5, 5,
	0, 2, 1, 3, 3, 2, 3, 1, 2, 0,
	3, 1, 1, 3, 3, 4, 4, 5, 3, 4,
	5, 6, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 1, 4, 5, 6, 4,
	4, 6, 6, 6, 8, 8, 8, 8, 9, 7,
	5, 4, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 8, 8, 0, 2,
	3, 4, 4, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 2, 3, 3, 1, 2, 2,
	1, 2, 1, 2, 2, 1, 2, 0, 1, 0,
	2, 1, 2, 4, 0, 2, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	0, 3, 0, 2, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 2,
	1, 3, 5, 4, 6, 1, 3, 3, 5, 0,
	5, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	1, 3, 3, 3, 3, 3, 1, 2, 1, 1,
	1, 1, 1, 1, 0, 2, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 0, 1, 1, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -195, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -19, -20, -21, -23, -24, -25,
	-22, -16, -3, -4, 6, 7, -29, 9, 10, 30,
	-17, 115, 116, 118, 117, 151, 119, 144, 50, 165,
	166, 168, 169, 25, 145, 146, 149, 150, 31, 32,
	121, -197, 8, 265, 54, -196, 363, -93, 15, -28,
	5, -26, -200, -26, -26, -26, -26, -26, -173, -175,
	54, 90, -126, 126, 72, 257, 122, 123, 130, -129,
	57, -128, 275, 137, 307, 308, 165, 176, 170, 197,
	189, 276, 309, 138, 187, 190, 244, 136, 310, 231,
	238, 66, 168, 253, 311, 147, 185, 181, 312, 284,
	179, 27, 313, 240, 202, 314, 280, 180, 239, 121,
	315, 140, 134, 316, 203, 207, 317, 245, 318, 319,
	320, 174, 175, 321, 247, 201, 135, 33, 277, 35,
	155, 248, 205, 322, 200, 196, 323, 324, 325, 326,
	199, 173, 195, 39, 209, 208, 210, 243, 192, 327,
	328, 329, 141, 330, 182, 18, 331, 332, 333, 334,
	335, 251, 150, 336, 153, 337, 338, 339, 340, 341,
	342, 242, 204, 206, 131, 157, 279, 343, 249, 178,
	344, 142, 154, 149, 252, 143, 345, 346, 347, 348,
	349, 350, 351, 169, 352, 353, 354, 355, 164, 246,
	255, 38, 228, 356, 172, 133, 357, 166, 161, 233,
	193, 156, 358, 359, 183, 184, 198, 171, 194, 167,
	158, 151, 360, 254, 229, 281, 191, 188, 162, 361,
	159, 160, 362, 234, 235, 163, 278, 250, 186, 230,
	-113, 126, 235, 128, 123, 123, 125, 126, 257, 122,
	123, -60, -135, 57, -128, 126, 123, 108, 190, 244,
	115, 232, 240, 125, 33, 242, 157, -144, 123, -115,
	231, 234, 235, 163, 57, 246, 245, 236, -135, 167,
	-140, -140, -140, -140, -140, 233, 233, -140, -2, -97,
	17, 16, -5, -3, -197, 6, 20, 21, -32, 40,
	41, -27, -38, 99, -39, -135, -66, 74, -71, 29,
	57, -128, 23, -70, -67, -86, -84, -85, 108, 109,
	110, 97, 98, 105, 75, 111, -75, -73, -74, -76,
	59, 58, 67, 60, 61, 62, 63, 68, 69, 70,
	-129, -82, -197, 44, 45, 266, 267, 268, 269, 274,
	270, 77, 34, 256, 264, 263, 262, 260, 261, 258,
	259, 272, 273, 129, 257, 103, 265, -113, -113, 11,
	-54, -55, -60, -62, -135, -105, -143, 167, -109, 246,
	245, -130, -107, -129, -127, 244, 190, 243, 120, 282,
	73, 22, 24, 226, 76, 108, 16, 77, 107, 266,
	115, 48, 283, 258, 259, 256, 268, 269, 257, 232,
	29, 10, 285, 25, 145, 21, 101, 117, 80, 81,
	148, 23, 146, 70, 288, 19, 51, 11, 13, 289,
	290, 14, 129, 128, 92, 125, 46, 8, 111, 26,
	89, 42, 291, 28, 292, 293, 294, 295, 44, 90,
	17, 260, 261, 31, 296, 274, 152, 103, 49, 36,
	74, 297, 298, 68, 299, 71, 52, 72, 15, 47,
	300, 301, 302, 303, 91, 118, 265, 45, 304, 122,
	6, 271, 30, 144, 43, 305, 123, 79, 272, 273,
	127, 69, 5, 130, 32, 9, 50, 53, 262, 263,
	264, 34, 78, 12, 306, -174, 90, -167, 57, -60,
	125, -60, 265, -122, 129, -122, -122, 123, -60, 115,
	117, 120, 52, -18, -60, -121, 129, 57, -121, -121,
	-121, -60, 112, -60, 57, 30, -141, -197, -130, 257,
	57, 157, 123, 158, 126, -141, -141, -141, -141, 161,
	162, -141, -118, -117, 238, 239, 233, 237, 12, 162,
	233, 160, -141, -140, -140, -198, 56, -98, 19, 31,
	-39, -135, -94, -95, -39, -93, -2, -26, 36, -30,
	21, 65, 11, -132, 73, 72, 89, -131, 22, -129,
	59, 112, -39, -68, 92, 74, 90, 91, 76, 94,
	93, 104, 97, 98, 99, 100, 101, 102, 103, 95,
	96, 107, 82, 83, 84, 85, 86, 87, 88, -114,
	-197, -85, -197, 113, 114, -71, -71, -71, -71, -71,
	-71, -71, -71, -197, -2, -80, -39, -197, -197, -197,
	-197, -197, -197, -197, -197, -197, -89, -39, -197, -201,
	-77, -197, -201, -77, -201, -77, -201, -197, -201, -77,
	-201, -77, -201, -201, -77, -197, -197, -197, -197, -197,
	-197, -61, 26, -60, -41, -42, -43, -44, -63, -85,
	-197, 57, -60, -60, -54, -199, 55, 11, 53, -199,
	55, 112, 55, -105, 167, -106, -110, 247, 249, 82,
	-134, -129, 59, 29, 30, 56, 55, -60, -146, -149,
	-151, -150, -152, -147, -148, 187, 188, 108, 191, 193,
	194, 195, 196, 197, 198, 199, 200, 201, 202, 221,
	222, 30, 224, 59, 147, 183, 184, 185, 186, 203,
	204, 205, 206, 207, 208, 209, 210, 170, 189, 276,
	171, 172, 173, 174, 175, 176, 211, 212, 213, 214,
	215, 216, 217, 218, 178, 179, 180, 181, 182, 219,
	220, 57, -141, 126, 57, 74, 57, -60, -60, -141,
	159, 159, 123, 123, 164, -60, 55, 127, -54, 23,
	52, -60, 57, 57, -136, -135, -127, -141, -141, -141,
	-141, -141, -60, -141, -141, -141, -141, 11, -116, 11,
	92, -39, -120, 90, 52, 9, 92, 55, 18, 112,
	55, -96, 24, 25, -97, -198, -32, -72, -129, 60,
	63, -31, 43, -60, -39, -39, -78, 68, 74, 69,
	70, -131, 99, -136, -130, -127, -71, -79, -82, -85,
	64, 92, 90, 91, 76, -71, -71, -71, -71, -71,
	-71, -71, -71, -71, -71, -71, -71, -71, -71, -71,
	-142, 57, 59, 57, -70, -70, -129, -37, 21, -36,
	-38, -198, 55, -198, -2, -36, -36, -39, -39, -86,
	59, -36, -86, 59, -36, -36, -30, -87, -88, 78,
	-86, -129, -135, -198, -71, -129, -129, -36, -37, -36,
	-36, -101, 153, -60, 30, 55, -56, -58, -57, -59,
	42, 46, 48, 43, 44, 45, 49, -139, 22, -41,
	-197, -197, -138, 153, -137, 22, -135, 59, -101, 53,
	-41, -60, -41, -62, -135, 99, -109, -106, 55, 248,
	250, 251, 52, 71, -39, -158, 107, -45, 241, -167,
	-168, -169, -177, 139, -182, 131, 133, 130, -170, 140,
	125, 28, 56, -163, 68, 74, 223, -159, 229, -153,
	54, -153, -153, -153, -153, -157, 190, -157, -157, -157,
	54, 54, 54, 54, -153, -153, -153, -161, 54, -161,
	-161, -162, 54, -162, -162, -162, -133, 53, -60, -46,
	241, 23, -141, -123, 120, 117, 118, -185, 116, 226,
	190, 66, 29, 15, 266, 153, 281, 57, 154, -60,
	-60, -60, -60, -60, 120, 117, -60, -60, -60, -141,
	-60, -119, 90, 12, -135, -135, 59, -60, 38, -39,
	-39, -136, -95, -98, -112, 19, 11, 34, 34, -36,
	68, 69, 70, 112, -197, -79, -71, -71, -71, -35,
	148, 73, -198, -198, -36, 55, -39, -198, -198, -198,
	55, 53, 22, 11, 11, -198, 11, 11, -198, -198,
	-36, -90, -88, 80, -39, -198, 112, -198, 55, 55,
	-198, -198, -198, -198, -69, 30, 34, -2, -197, -197,
	-104, -108, -86, -42, -43, -43, -42, -43, 42, 42,
	42, 47, 42, 47, 42, -57, -135, -198, -52, -51,
	-50, -53, -39, 123, 124, -64, 50, 128, 51, -197,
	-137, -65, 12, -41, -65, -65, 112, -110, -111, 252,
	249, 255, 57, 59, 82, 54, 57, 28, -170, -170,
	-171, 57, -171, 28, -155, 29, 68, -160, 230, 60,
	-157, -157, -158, 30, -158, -158, -158, -166, 59, -166,
	-166, -166, 60, 60, 52, -129, -141, 82, -140, -191,
	136, 132, 139, 140, 134, 57, 125, 28, 131, 133,
	153, 130, -191, -124, -125, 127, 22, 125, 28, 153,
	-190, 53, 159, 226, 159, 127, -141, -116, 59, -39,
	39, 112, -60, -40, 11, 99, -130, -37, -35, 73,
	-71, -71, -198, -38, -145, 108, 187, 147, 185, 181,
	201, 192, 228, 183, 229, -142, -145, -71, -71, -71,
	-71, 275, -93, 81, -39, 79, -130, -71, -71, -103,
	52, -104, -81, -83, -82, -197, -2, -99, -129, -102,
	-129, -65, 55, 82, -48, -47, 52, 53, -49, 52,
	-47, 42, 42, -198, 55, -197, -197, 125, 125, 125,
	-102, -93, -39, -65, 249, 253, 254, -176, -130, 59,
	60, -179, -178, -129, -182, -171, -171, 54, -156, 52,
	-71, 56, -158, -158, 57, 108, 56, 55, 56, 56,
	56, 55, 56, 55, -60, -176, -140, -140, -60, -140,
	-129, -188, 278, -189, 57, -129, -129, -129, -60, -119,
	-65, -41, -198, -71, -198, -153, -153, -153, -162, -153,
	175, -153, 175, -198, -198, 19, 19, 19, 19, -197,
	-34, 271, -39, 55, 55, 27, -103, 55, -198, -198,
	-198, 55, 112, -198, 55, -93, -108, -39, -39, 54,
	-39, -139, -50, -42, -86, -197, -197, -197, -198, -97,
	54, 56, 55, -153, -100, -129, -164, 226, 9, -157,
	59, -157, -157, -157, 60, 60, -141, 26, -187, -186,
	-130, 54, 53, -91, 13, -157, 57, -71, -71, -71,
	-71, -71, -198, 59, -71, -71, 28, -83, 34, -2,
	-197, -129, -129, -129, -97, -100, -135, -198, -198, -100,
	-100, -100, -138, -176, -181, -180, 53, 135, 66, -178,
	56, 55, -165, 131, 28, 130, -74, -158, -158, -158,
	-158, 56, 56, -197, 55, 82, -100, -60, -92, 14,
	16, -198, -198, -198, -198, -33, 92, 278, -198, -198,
	9, -81, -2, 112, 56, -198, -198, -198, -64, 56,
	-180, 57, -172, 82, 59, 142, -129, -154, 66, 28,
	28, -183, -184, 153, -186, -176, 56, -39, -80, -198,
	276, 49, 279, -104, -198, -129, 60, -60, 59, -198,
	55, -129, -190, 39, 277, 280, 54, -184, 34, -188,
	39, -100, 155, 278, 56, 156, 279, -193, -194, 52,
	-197, 280, -194, 52, 10, 9, -71, 152, -192, 143,
	138, 141, 30, -192, -198, -198, 137, 29, 68,
}
var yyDef = [...]int{

	23, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 584, 0, 331, 331, 331, 331, 331, 331,
	0, 655, 638, 0, 0, 0, 0, -2, 318, 319,
	0, 321, 322, 956, 956, 956, 956, 956, 0, 0,
	956, 0, 35, 36, 954, 1, 3, 592, 0, 0,
	335, 338, 333, 0, 638, 638, 0, 0, 65, 66,
	0, 0, 0, 943, 0, 636, 636, 636, 656, 657,
	660, 661, 785, 786, 787, 788, 789, 790, 791, 792,
	793, 794, 795, 796, 797, 798, 799, 800, 801, 802,
	803, 804, 805, 806, 807, 808, 809, 810, 811, 812,
	813, 814, 815, 816, 817, 818, 819, 820, 821, 822,
	823, 824, 825, 826, 827, 828, 829, 830, 831, 832,
	833, 834, 835, 836, 837, 838, 839, 840, 841, 842,
	843, 844, 845, 846, 847, 848, 849, 850, 851, 852,
	853, 854, 855, 856, 857, 858, 859, 860, 861, 862,
	863, 864, 865, 866, 867, 868, 869, 870, 871, 872,
	873, 874, 875, 876, 877, 878, 879, 880, 881, 882,
	883, 884, 885, 886, 887, 888, 889, 890, 891, 892,
	893, 894, 895, 896, 897, 898, 899, 900, 901, 902,
	903, 904, 905, 906, 907, 908, 909, 910, 911, 912,
	913, 914, 915, 916, 917, 918, 919, 920, 921, 922,
	923, 924, 925, 926, 927, 928, 929, 930, 931, 932,
	933, 934, 935, 936, 937, 938, 939, 940, 941, 942,
	944, 945, 946, 947, 948, 949, 950, 951, 952, 953,
	0, 0, 0, 639, 0, 634, 0, 634, 634, 634,
	0, 270, 413, 664, 665, 943, 0, 0, 0, 957,
	0, 957, 282, 957, 957, 285, 957, 0, 957, 0,
	292, 0, 0, 298, 957, 315, 316, 303, 317, 320,
	323, 324, 325, 326, 327, 956, 956, 330, 29, 596,
	0, 0, 584, 31, 0, 331, 336, 337, 341, 339,
	340, 332, 0, 349, 353, 0, 422, 0, 427, 429,
	-2, -2, 0, 464, 465, 466, 467, 468, 0, 0,
	0, 0, 0, 0, 0, 0, 492, 493, 494, 495,
	569, 570, 571, 572, 573, 574, 575, 576, 431, 432,
	566, 616, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 0, 528, 528, 528, 528, 528, 528, 528,
	528, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 44, 46, 413, 50, 0, 932, 620, -2,
	-2, 0, 0, 662, 663, -2, 798, -2, 668, 669,
	670, 671, 672, 673, 674, 675, 676, 677, 678, 679,
	680, 681, 682, 683, 684, 685, 686, 687, 688, 689,
	690, 691, 692, 693, 694, 695, 696, 697, 698, 699,
	700, 701, 702, 703, 704, 705, 706, 707, 708, 709,
	710, 711, 712, 713, 714, 715, 716, 717, 718, 719,
	720, 721, 722, 723, 724, 725, 726, 727, 728, 729,
	730, 731, 732, 733, 734, 735, 736, 737, 738, 739,
	740, 741, 742, 743, 744, 745, 746, 747, 748, 749,
	750, 751, 752, 753, 754, 755, 756, 757, 758, 759,
	760, 761, 762, 763, 764, 765, 766, 767, 768, 769,
	770, 771, 772, 773, 774, 775, 776, 777, 778, 779,
	780, 781, 782, 783, 784, 0, 0, 84, 0, 82,
	0, 957, 0, 0, 0, 0, 0, 0, 957, 0,
	0, 0, 0, 261, 0, 0, 0, 0, 0, 0,
	0, 269, 0, 271, 957, 957, 274, 958, 959, 957,
	957, 957, 0, 957, 957, 281, 283, 284, 286, 957,
	957, 288, 0, 306, 304, 305, 300, 301, 0, 312,
	295, 296, 299, 328, 329, 30, 955, 24, 0, 0,
	593, 0, 585, 586, 589, 592, 29, 338, 0, 343,
	342, 334, 0, 350, 0, 0, 0, 354, 0, 356,
	357, 0, 425, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 449, 450, 451, 452, 453, 454, 455, 428,
	0, 442, 0, 0, 0, 484, 485, 486, 487, 488,
	489, 490, 0, 345, 29, 0, 462, 0, 0, 0,
	0, 0, 0, 0, 0, 341, 0, 558, 0, 512,
	520, 0, 513, 521, 514, 522, 515, 0, 516, 523,
	517, 524, 518, 519, 525, 0, 0, 0, 345, 0,
	0, 48, 0, 412, 0, 360, 362, 363, 364, -2,
	0, 664, 396, -2, 0, 0, 0, 42, 43, 0,
	0, 0, 0, 51, 932, 53, 54, 0, 0, 0,
	177, 629, 630, 631, 627, 221, 0, 0, 164, 160,
	90, 91, 92, 153, 94, 153, 153, 153, 153, 174,
	174, 174, 174, 132, 133, 134, 135, 136, 0, 0,
	0, 0, 141, 142, 119, 153, 153, 153, 123, 143,
	144, 145, 146, 147, 148, 149, 150, 95, 96, 97,
	98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 155, 155, 155, 157, 157, 157,
	157, 658, 68, 0, 224, 0, 957, 80, 0, 234,
	0, 0, 0, 0, 0, 0, 0, 0, 264, 635,
	0, 957, 267, 268, 414, 666, 667, 272, 273, 275,
	276, 277, 278, 279, 280, 287, 291, 0, 309, 0,
	0, 293, 294, 0, 0, 597, 0, 0, 0, 0,
	0, 588, 590, 591, 596, 32, 341, 0, 577, 0,
	0, 0, 344, 27, 423, 424, 426, 443, 0, 445,
	447, 355, 351, 0, 567, -2, 433, 434, 458, 459,
	460, 0, 0, 0, 0, 456, 438, 0, 469, 470,
	471, 472, 473, 474, 475, 476, 477, 478, 479, 480,
	483, 542, 543, 0, 481, 482, 491, 0, 0, 346,
	347, 461, 0, 615, 29, 0, 0, 0, 0, 466,
	569, 0, 466, 569, 0, 0, 0, 564, 561, 0,
	0, 566, 0, 529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 411, 0, 0, 0, 0, 0, 0,
	401, 0, 0, 404, 0, 0, 0, 0, 395, 0,
	0, 372, 416, 877, 397, 0, 399, 400, 420, 0,
	420, 45, 420, 47, 0, 415, 621, 52, 0, 0,
	57, 58, 622, 623, 624, 625, 0, 81, 0, 85,
	86, 87, 0, 0, 209, 0, 0, 203, 203, 0,
	201, 202, 83, 168, 165, 0, 167, 162, 161, 93,
	0, 174, 174, 126, 127, 177, 0, 177, 177, 177,
	0, 0, 0, 0, 120, 121, 122, 112, 0, 113,
	114, 115, 0, 116, 117, 118, 0, 0, 957, 70,
	0, 637, 71, 956, 0, 0, 650, 235, 640, 641,
	642, 643, 644, 645, 646, 647, 648, 649, 0, 72,
	237, 239, 238, 242, 0, 0, 0, 262, 957, 266,
	306, 290, 0, 0, 307, 308, 313, 297, 0, 594,
	595, 0, 587, 25, 0, 632, 633, 578, 579, 358,
	444, 446, 448, 0, 345, 435, 456, 439, 0, 436,
	0, 0, 430, 496, 0, 0, 463, -2, 499, 500,
	0, 0, 0, 0, 0, 535, 0, 0, 536, 0,
	584, 0, 562, 0, 0, 511, 0, 530, 0, 0,
	531, 532, 533, 534, 609, 0, 0, -2, 0, 0,
	420, 617, 0, 361, 390, 392, 0, 387, 402, 403,
	405, 0, 407, 0, 409, 410, 365, 367, 0, 373,
	374, 376, 377, 0, 0, 370, 0, 0, 0, 0,
	398, 584, 0, 420, 40, 41, 0, 55, 56, 0,
	0, 62, 178, 179, 0, 0, 0, 196, 203, 203,
	199, 204, 200, 0, 170, 0, 166, 89, 163, 0,
	177, 177, 128, 0, 129, 130, 131, 0, 151, 0,
	0, 0, 0, 0, 0, 659, 69, 0, 229, 956,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 956, 0, 956, 651, 652, 653, 654, 0,
	75, 0, 0, 0, 0, 0, 265, 309, 310, 311,
	598, 0, 26, 420, 0, 352, 568, 0, 437, 0,
	457, 440, 497, 348, 0, 153, 153, 547, 153, 157,
	550, 153, 552, 153, 555, 0, 0, 0, 0, 0,
	0, 0, 559, 510, 565, 0, 567, 0, 0, 33,
	0, 609, 599, 611, 613, 0, 29, 0, 605, 0,
	382, 584, 0, 0, 384, 391, 0, 0, 385, 0,
	386, 406, 408, 394, 0, 0, 0, 0, 0, 0,
	0, 592, 421, 39, 59, 60, 61, 222, 226, 227,
	228, 0, 205, 153, 208, 197, 198, 0, 172, 0,
	169, 154, 124, 125, 175, 176, 174, 0, 174, 174,
	174, 0, 158, 0, 957, 225, 230, 231, 232, 233,
	0, 236, 0, 73, 74, 0, 0, 241, 263, 289,
	580, 359, 498, 441, 501, 544, 174, 548, 549, 551,
	553, 554, 556, 503, 502, 0, 0, 0, 0, 0,
	0, 0, 563, 0, 0, 0, 34, 0, 614, -2,
	0, 0, 0, 49, 0, 592, 618, 619, 388, 0,
	393, 368, 375, 0, 0, 0, 0, 0, 396, 38,
	0, 188, 0, 207, 0, 380, 180, 173, 0, 177,
	152, 177, 177, 177, 0, 0, 67, 0, 76, 77,
	0, 0, 0, 582, 0, 545, 546, 0, 0, 0,
	0, 537, 509, 560, 0, 0, 0, 612, 0, -2,
	0, 607, 606, 383, 37, 0, 369, 378, 379, 0,
	0, 0, 416, 0, 187, 189, 0, 194, 0, 206,
	0, 0, 185, 0, 182, 184, 171, 137, 138, 139,
	140, 156, 159, 0, 0, 0, 0, 243, 28, 0,
	0, 504, 506, 505, 507, 0, 0, 0, 526, 527,
	0, 602, 29, 0, 389, 417, 418, 419, 371, 223,
	190, 191, 0, 195, 193, 0, 381, 88, 0, 181,
	183, 0, 257, 0, 78, 79, 72, 583, 581, 508,
	0, 0, 0, 610, -2, 608, 192, 0, 186, 256,
	0, 0, 75, 538, 0, 541, 0, 258, 0, 240,
	539, 0, 0, 0, 210, 0, 0, 211, 212, 0,
	0, 540, 213, 0, 0, 0, 0, 0, 214, 216,
	217, 0, 0, 215, 259, 260, 218, 219, 220,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 75, 3, 3, 3, 102, 94, 3,
	54, 56, 99, 97, 55, 98, 112, 100, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 363,
	83, 82, 84, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 104, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 93, 3, 105,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	76, 77, 78, 79, 80, 81, 85, 86, 87, 88,
	89, 90, 91, 92, 95, 96, 101, 103, 106, 107,
	108, 109, 110, 111, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:342
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:347
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:348
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:352
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:374
		{
			setParseTree(yylex, nil)
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:380
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:388
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:392
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:398
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 28:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:405
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:411
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:415
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:421
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:425
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:432
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:444
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:456
		{
			yyVAL.str = InsertStr
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:460
		{
			yyVAL.str = ReplaceStr
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:466
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:472
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:476
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:480
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:484
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:489
		{
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:490
		{
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:494
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:498
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:504
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:508
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:513
		{
			yyVAL.partitions = nil
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:517
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:523
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:527
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:531
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:535
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:541
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:545
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:551
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:555
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:559
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:565
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:569
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:573
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:577
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:583
		{
			yyVAL.str = SessionStr
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:587
		{
			yyVAL.str = GlobalStr
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:593
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:598
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 67:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:604
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:609
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 69:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:613
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:617
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes), Options: yyDollar[5].databaseOption}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:621
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:626
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:630
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:636
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:641
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:646
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:652
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:657
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:663
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:669
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:676
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOption
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:683
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:687
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:693
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:698
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:702
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:706
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:712
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:723
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:734
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:739
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:745
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:749
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:753
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:757
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:761
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:765
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:769
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:773
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:777
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:781
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:785
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:789
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:793
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:797
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:801
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:805
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:809
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:815
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:821
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:833
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:839
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:845
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:859
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:863
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:867
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:871
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:875
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:881
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:885
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:889
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:893
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:897
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:901
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:905
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:909
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:913
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:917
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:921
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:925
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:929
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:933
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 138:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:937
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 139:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:941
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 140:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:946
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:950
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:954
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:960
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:964
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:968
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:972
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:976
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:980
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:984
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:988
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:994
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:999
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1004
		{
			yyVAL.sqlVal = nil
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1008
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1013
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 156:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1017
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1025
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1029
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 159:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1035
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1043
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1047
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1052
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1056
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1062
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1066
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1070
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1074
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1079
		{
			yyVAL.optVal = nil
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1083
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1088
		{
			yyVAL.optVal = nil
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1092
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1097
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1101
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 174:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1106
		{
			yyVAL.str = ""
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1110
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1114
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1119
		{
			yyVAL.str = ""
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1123
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1127
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 180:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1132
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1136
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1140
		{
			yyVAL.colKeyOpt = colKey
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1144
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1148
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1153
		{
			yyVAL.sqlVal = nil
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1157
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1163
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 188:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1167
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1173
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1177
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1183
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1187
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1192
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 194:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1198
		{
			yyVAL.str = ""
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1202
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1208
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1212
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1216
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1220
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1224
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1230
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1234
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1239
		{
			yyVAL.str = ""
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1243
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1249
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1253
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1259
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1265
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1269
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 210:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1276
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 211:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1280
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 212:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1284
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 213:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1288
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1294
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1300
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1306
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1310
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1314
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1318
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1322
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 221:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1329
		{
			yyVAL.tableOption = &TableOption{}
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1333
		{
			yyVAL.tableOption = &TableOption{Engine: yyDollar[3].str}
		}
	case 223:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1337
		{
			yyVAL.tableOption = &TableOption{Engine: yyDollar[3].str, Formatter: yyDollar[5].str}
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1342
		{
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1345
		{
			yyVAL.databaseOption = &DatabaseOption{Engine: yyDollar[3].str}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1352
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1356
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1360
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 229:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1366
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 230:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1370
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 231:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1374
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 232:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1378
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 233:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1383
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1388
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 235:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1392
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 236:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1396
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 237:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1408
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 238:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1418
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 239:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1422
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 240:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1426
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 241:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1439
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 242:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1449
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 243:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1453
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 256:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1480
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1486
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1490
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 259:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1496
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 260:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1500
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1506
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1512
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 263:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1516
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1524
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 265:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1532
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 266:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1537
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1545
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1549
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1555
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1559
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1564
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1570
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1575
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1579
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1583
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1588
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1592
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1596
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1600
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1604
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1608
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1612
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1616
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1620
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1624
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1628
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1632
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1636
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1640
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 290:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1645
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1655
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1659
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1663
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1669
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1674
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1678
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1682
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1686
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1700
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1706
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1710
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1716
		{
			yyVAL.str = ""
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1720
		{
			yyVAL.str = "full "
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1726
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1730
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1736
		{
			yyVAL.str = ""
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1740
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1744
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1750
		{
			yyVAL.showFilter = nil
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1754
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1758
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1764
		{
			yyVAL.showFilter = nil
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1768
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1774
		{
			yyVAL.str = ""
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1778
		{
			yyVAL.str = SessionStr
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1782
		{
			yyVAL.str = GlobalStr
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1788
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1792
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1798
		{
			yyVAL.statement = &Begin{}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1802
		{
			yyVAL.statement = &Begin{}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1808
		{
			yyVAL.statement = &Commit{}
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1814
		{
			yyVAL.statement = &Rollback{}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1820
		{
			yyVAL.statement = &OtherRead{}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1824
		{
			yyVAL.statement = &OtherRead{}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1828
		{
			yyVAL.statement = &OtherRead{}
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1832
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1836
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1840
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1844
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1850
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1854
		{
			setAllowComments(yylex, true)
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1858
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1864
		{
			yyVAL.bytes2 = nil
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1868
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1874
		{
			yyVAL.str = UnionStr
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1878
		{
			yyVAL.str = UnionAllStr
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1882
		{
			yyVAL.str = UnionDistinctStr
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1887
		{
			yyVAL.str = ""
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1891
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1895
		{
			yyVAL.str = SQLCacheStr
		}
	case 341:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1900
		{
			yyVAL.str = ""
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1904
		{
			yyVAL.str = DistinctStr
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1909
		{
			yyVAL.str = ""
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1913
		{
			yyVAL.str = StraightJoinHint
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1918
		{
			yyVAL.selectExprs = nil
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1922
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1928
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1932
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1938
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1942
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1946
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 352:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1950
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1955
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1959
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1963
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1970
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1975
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1979
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1985
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1989
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1999
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2003
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2007
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2013
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 368:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2017
		{
			yyVAL.tableExpr = &TableValuedFunction{Name: NewColIdent(string(yyDollar[1].bytes)), Args: yyDollar[3].tableValuedFunctionArguments}
		}
	case 369:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2021
		{
			yyVAL.tableExpr = &TableValuedFunction{Name: NewColIdent(string(yyDollar[1].bytes)), Args: yyDollar[3].tableValuedFunctionArguments, As: yyDollar[6].tableIdent}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2028
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 371:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2032
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2037
		{
			yyVAL.tableValuedFunctionArguments = nil
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2041
		{
			yyVAL.tableValuedFunctionArguments = yyDollar[1].tableValuedFunctionArguments
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2047
		{
			yyVAL.tableValuedFunctionArguments = TableValuedFunctionArguments{yyDollar[1].tableValuedFunctionArgument}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2051
		{
			yyVAL.tableValuedFunctionArguments = append(yyVAL.tableValuedFunctionArguments, yyDollar[3].tableValuedFunctionArgument)
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2057
		{
			yyVAL.tableValuedFunctionArgument = &TableValuedFunctionArgument{Value: yyDollar[1].tableValuedFunctionArgumentValue}
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2063
		{
			yyVAL.tableValuedFunctionArgumentValue = &ExprTableValuedFunctionArgumentValue{Expr: yyDollar[1].expr}
		}
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2067
		{
			yyVAL.tableValuedFunctionArgumentValue = &TableDescriptorTableValuedFunctionArgumentValue{Table: yyDollar[3].tableExpr}
		}
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2071
		{
			yyVAL.tableValuedFunctionArgumentValue = &FieldDescriptorTableValuedFunctionArgumentValue{Field: yyDollar[3].colName}
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2078
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2082
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2088
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2092
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 384:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2105
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2109
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 386:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2113
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2117
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2123
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 389:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2125
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2129
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2131
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2135
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2137
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 394:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2140
		{
			yyVAL.empty = struct{}{}
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2142
		{
			yyVAL.empty = struct{}{}
		}
	case 396:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2145
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2149
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2153
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2160
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2166
		{
			yyVAL.str = JoinStr
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2170
		{
			yyVAL.str = JoinStr
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2174
		{
			yyVAL.str = JoinStr
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2180
		{
			yyVAL.str = StraightJoinStr
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2186
		{
			yyVAL.str = LeftJoinStr
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2190
		{
			yyVAL.str = LeftJoinStr
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2194
		{
			yyVAL.str = RightJoinStr
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2198
		{
			yyVAL.str = RightJoinStr
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2204
		{
			yyVAL.str = NaturalJoinStr
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2208
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2218
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2222
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2228
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2232
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2238
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 416:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2243
		{
			yyVAL.indexHints = nil
		}
	case 417:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2247
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 418:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2251
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 419:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2255
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 420:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2260
		{
			yyVAL.expr = nil
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2264
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2270
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2274
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2278
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2282
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2286
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2290
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2294
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2300
		{
			yyVAL.str = ""
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2304
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2310
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2314
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2320
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2324
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 435:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2328
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 436:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2332
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 437:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2336
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2340
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 439:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2344
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 440:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2348
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 441:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2352
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2356
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2362
		{
			yyVAL.str = IsNullStr
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2366
		{
			yyVAL.str = IsNotNullStr
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2370
		{
			yyVAL.str = IsTrueStr
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2374
		{
			yyVAL.str = IsNotTrueStr
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2378
		{
			yyVAL.str = IsFalseStr
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2382
		{
			yyVAL.str = IsNotFalseStr
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2388
		{
			yyVAL.str = EqualStr
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2392
		{
			yyVAL.str = LessThanStr
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2396
		{
			yyVAL.str = GreaterThanStr
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2400
		{
			yyVAL.str = LessEqualStr
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2404
		{
			yyVAL.str = GreaterEqualStr
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2408
		{
			yyVAL.str = NotEqualStr
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2412
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2417
		{
			yyVAL.expr = nil
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2421
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2427
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2431
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2435
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2441
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2447
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2451
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2457
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2461
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2465
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2469
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2473
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2477
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2481
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2485
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2489
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2493
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2497
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2501
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2505
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2509
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2513
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2517
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2521
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2525
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2529
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2533
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2537
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2541
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2545
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2549
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2557
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2571
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2575
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2579
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 496:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2597
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 497:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2601
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 498:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2605
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 499:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2615
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 500:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2619
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 501:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2623
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 502:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2627
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 503:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2631
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 504:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2635
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 505:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2639
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 506:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2643
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 507:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2647
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 508:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2651
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 509:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2655
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 510:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2659
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 511:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2663
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2673
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2677
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2681
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2686
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2691
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2696
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2702
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2707
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2712
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2716
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2720
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2725
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2730
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2735
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 526:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2739
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 527:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2743
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2753
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2763
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2767
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 533:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2771
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2775
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2779
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 536:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2783
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 537:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2789
		{
			yyVAL.str = ""
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2793
		{
			yyVAL.str = BooleanModeStr
		}
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2797
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 540:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2801
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2805
		{
			yyVAL.str = QueryExpansionStr
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2811
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2815
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2821
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2825
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2829
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2833
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2837
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2841
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2847
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2851
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2855
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2859
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2863
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2867
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2871
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 557:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2876
		{
			yyVAL.expr = nil
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2880
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2885
		{
			yyVAL.str = string("")
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2889
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2895
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2899
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 563:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2905
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2910
		{
			yyVAL.expr = nil
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2914
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2920
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2924
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 568:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2928
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2934
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2938
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2942
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2946
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2950
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2954
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2958
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2962
		{
			yyVAL.expr = &NullVal{}
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2968
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2977
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2981
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 580:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2986
		{
			yyVAL.exprs = nil
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2990
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 582:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2995
		{
			yyVAL.expr = nil
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2999
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 584:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3004
		{
			yyVAL.orderBy = nil
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3008
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3014
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3018
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3024
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 589:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3029
		{
			yyVAL.str = AscScr
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3033
		{
			yyVAL.str = AscScr
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3037
		{
			yyVAL.str = DescScr
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3042
		{
			yyVAL.limit = nil
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3046
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3050
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 595:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3054
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3059
		{
			yyVAL.str = ""
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3063
		{
			yyVAL.str = ForUpdateStr
		}
	case 598:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3067
		{
			yyVAL.str = ShareModeStr
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3080
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3084
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3088
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 602:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3093
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3097
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 604:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3101
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3108
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3112
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3116
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 608:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3120
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 609:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3125
		{
			yyVAL.updateExprs = nil
		}
	case 610:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3129
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3135
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3139
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3145
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3149
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3155
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3161
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3171
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3175
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3181
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3187
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3191
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3197
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3201
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3205
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3209
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3216
		{
			yyVAL.bytes = []byte("charset")
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3223
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3227
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3231
		{
			yyVAL.expr = &Default{}
		}
	case 634:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3240
		{
			yyVAL.byt = 0
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3242
		{
			yyVAL.byt = 1
		}
	case 636:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3245
		{
			yyVAL.empty = struct{}{}
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3247
		{
			yyVAL.empty = struct{}{}
		}
	case 638:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3250
		{
			yyVAL.str = ""
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3252
		{
			yyVAL.str = IgnoreStr
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3256
		{
			yyVAL.empty = struct{}{}
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3258
		{
			yyVAL.empty = struct{}{}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3260
		{
			yyVAL.empty = struct{}{}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3262
		{
			yyVAL.empty = struct{}{}
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3264
		{
			yyVAL.empty = struct{}{}
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3266
		{
			yyVAL.empty = struct{}{}
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3268
		{
			yyVAL.empty = struct{}{}
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3270
		{
			yyVAL.empty = struct{}{}
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3272
		{
			yyVAL.empty = struct{}{}
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3274
		{
			yyVAL.empty = struct{}{}
		}
	case 650:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3277
		{
			yyVAL.empty = struct{}{}
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3279
		{
			yyVAL.empty = struct{}{}
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3281
		{
			yyVAL.empty = struct{}{}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3285
		{
			yyVAL.empty = struct{}{}
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3287
		{
			yyVAL.empty = struct{}{}
		}
	case 655:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3290
		{
			yyVAL.empty = struct{}{}
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3292
		{
			yyVAL.empty = struct{}{}
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3294
		{
			yyVAL.empty = struct{}{}
		}
	case 658:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3297
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3299
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3303
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3307
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3314
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3320
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3324
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3331
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3643
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3652
		{
			decNesting(yylex)
		}
	case 956:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3657
		{
			skipToEnd(yylex)
		}
	case 957:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3662
		{
			skipToEnd(yylex)
		}
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3666
		{
			skipToEnd(yylex)
		}
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3670
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
