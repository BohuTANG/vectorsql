// Code generated by protoc-gen-go. DO NOT EDIT.
// source: query.proto

package query

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Flags sent from the MySQL C API
type MySqlFlag int32

const (
	MySqlFlag_EMPTY                 MySqlFlag = 0
	MySqlFlag_NOT_NULL_FLAG         MySqlFlag = 1
	MySqlFlag_PRI_KEY_FLAG          MySqlFlag = 2
	MySqlFlag_UNIQUE_KEY_FLAG       MySqlFlag = 4
	MySqlFlag_MULTIPLE_KEY_FLAG     MySqlFlag = 8
	MySqlFlag_BLOB_FLAG             MySqlFlag = 16
	MySqlFlag_UNSIGNED_FLAG         MySqlFlag = 32
	MySqlFlag_ZEROFILL_FLAG         MySqlFlag = 64
	MySqlFlag_BINARY_FLAG           MySqlFlag = 128
	MySqlFlag_ENUM_FLAG             MySqlFlag = 256
	MySqlFlag_AUTO_INCREMENT_FLAG   MySqlFlag = 512
	MySqlFlag_TIMESTAMP_FLAG        MySqlFlag = 1024
	MySqlFlag_SET_FLAG              MySqlFlag = 2048
	MySqlFlag_NO_DEFAULT_VALUE_FLAG MySqlFlag = 4096
	MySqlFlag_ON_UPDATE_NOW_FLAG    MySqlFlag = 8192
	MySqlFlag_NUM_FLAG              MySqlFlag = 32768
	MySqlFlag_PART_KEY_FLAG         MySqlFlag = 16384
	MySqlFlag_GROUP_FLAG            MySqlFlag = 32768
	MySqlFlag_UNIQUE_FLAG           MySqlFlag = 65536
	MySqlFlag_BINCMP_FLAG           MySqlFlag = 131072
)

var MySqlFlag_name = map[int32]string{
	0:     "EMPTY",
	1:     "NOT_NULL_FLAG",
	2:     "PRI_KEY_FLAG",
	4:     "UNIQUE_KEY_FLAG",
	8:     "MULTIPLE_KEY_FLAG",
	16:    "BLOB_FLAG",
	32:    "UNSIGNED_FLAG",
	64:    "ZEROFILL_FLAG",
	128:   "BINARY_FLAG",
	256:   "ENUM_FLAG",
	512:   "AUTO_INCREMENT_FLAG",
	1024:  "TIMESTAMP_FLAG",
	2048:  "SET_FLAG",
	4096:  "NO_DEFAULT_VALUE_FLAG",
	8192:  "ON_UPDATE_NOW_FLAG",
	32768: "NUM_FLAG",
	16384: "PART_KEY_FLAG",
	// Duplicate value: 32768: "GROUP_FLAG",
	65536:  "UNIQUE_FLAG",
	131072: "BINCMP_FLAG",
}

var MySqlFlag_value = map[string]int32{
	"EMPTY":                 0,
	"NOT_NULL_FLAG":         1,
	"PRI_KEY_FLAG":          2,
	"UNIQUE_KEY_FLAG":       4,
	"MULTIPLE_KEY_FLAG":     8,
	"BLOB_FLAG":             16,
	"UNSIGNED_FLAG":         32,
	"ZEROFILL_FLAG":         64,
	"BINARY_FLAG":           128,
	"ENUM_FLAG":             256,
	"AUTO_INCREMENT_FLAG":   512,
	"TIMESTAMP_FLAG":        1024,
	"SET_FLAG":              2048,
	"NO_DEFAULT_VALUE_FLAG": 4096,
	"ON_UPDATE_NOW_FLAG":    8192,
	"NUM_FLAG":              32768,
	"PART_KEY_FLAG":         16384,
	"GROUP_FLAG":            32768,
	"UNIQUE_FLAG":           65536,
	"BINCMP_FLAG":           131072,
}

func (x MySqlFlag) String() string {
	return proto.EnumName(MySqlFlag_name, int32(x))
}

func (MySqlFlag) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{0}
}

// Flag allows us to qualify types by their common properties.
type Flag int32

const (
	Flag_NONE       Flag = 0
	Flag_ISINTEGRAL Flag = 256
	Flag_ISUNSIGNED Flag = 512
	Flag_ISFLOAT    Flag = 1024
	Flag_ISQUOTED   Flag = 2048
	Flag_ISTEXT     Flag = 4096
	Flag_ISBINARY   Flag = 8192
)

var Flag_name = map[int32]string{
	0:    "NONE",
	256:  "ISINTEGRAL",
	512:  "ISUNSIGNED",
	1024: "ISFLOAT",
	2048: "ISQUOTED",
	4096: "ISTEXT",
	8192: "ISBINARY",
}

var Flag_value = map[string]int32{
	"NONE":       0,
	"ISINTEGRAL": 256,
	"ISUNSIGNED": 512,
	"ISFLOAT":    1024,
	"ISQUOTED":   2048,
	"ISTEXT":     4096,
	"ISBINARY":   8192,
}

func (x Flag) String() string {
	return proto.EnumName(Flag_name, int32(x))
}

func (Flag) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{1}
}

// Type defines the various supported data types in bind vars
// and query results.
type Type int32

const (
	// NULL_TYPE specifies a NULL type.
	Type_NULL_TYPE Type = 0
	// INT8 specifies a TINYINT type.
	// Properties: 1, IsNumber.
	Type_INT8 Type = 257
	// UINT8 specifies a TINYINT UNSIGNED type.
	// Properties: 2, IsNumber, IsUnsigned.
	Type_UINT8 Type = 770
	// INT16 specifies a SMALLINT type.
	// Properties: 3, IsNumber.
	Type_INT16 Type = 259
	// UINT16 specifies a SMALLINT UNSIGNED type.
	// Properties: 4, IsNumber, IsUnsigned.
	Type_UINT16 Type = 772
	// INT24 specifies a MEDIUMINT type.
	// Properties: 5, IsNumber.
	Type_INT24 Type = 261
	// UINT24 specifies a MEDIUMINT UNSIGNED type.
	// Properties: 6, IsNumber, IsUnsigned.
	Type_UINT24 Type = 774
	// INT32 specifies a INTEGER type.
	// Properties: 7, IsNumber.
	Type_INT32 Type = 263
	// UINT32 specifies a INTEGER UNSIGNED type.
	// Properties: 8, IsNumber, IsUnsigned.
	Type_UINT32 Type = 776
	// INT64 specifies a BIGINT type.
	// Properties: 9, IsNumber.
	Type_INT64 Type = 265
	// UINT64 specifies a BIGINT UNSIGNED type.
	// Properties: 10, IsNumber, IsUnsigned.
	Type_UINT64 Type = 778
	// FLOAT32 specifies a FLOAT type.
	// Properties: 11, IsFloat.
	Type_FLOAT32 Type = 1035
	// FLOAT64 specifies a DOUBLE or REAL type.
	// Properties: 12, IsFloat.
	Type_FLOAT64 Type = 1036
	// TIMESTAMP specifies a TIMESTAMP type.
	// Properties: 13, IsQuoted.
	Type_TIMESTAMP Type = 2061
	// DATE specifies a DATE type.
	// Properties: 14, IsQuoted.
	Type_DATE Type = 2062
	// TIME specifies a TIME type.
	// Properties: 15, IsQuoted.
	Type_TIME Type = 2063
	// DATETIME specifies a DATETIME type.
	// Properties: 16, IsQuoted.
	Type_DATETIME Type = 2064
	// YEAR specifies a YEAR type.
	// Properties: 17, IsNumber, IsUnsigned.
	Type_YEAR Type = 785
	// DECIMAL specifies a DECIMAL or NUMERIC type.
	// Properties: 18, None.
	Type_DECIMAL Type = 18
	// TEXT specifies a TEXT type.
	// Properties: 19, IsQuoted, IsText.
	Type_TEXT Type = 6163
	// BLOB specifies a BLOB type.
	// Properties: 20, IsQuoted, IsBinary.
	Type_BLOB Type = 10260
	// VARCHAR specifies a VARCHAR type.
	// Properties: 21, IsQuoted, IsText.
	Type_VARCHAR Type = 6165
	// VARBINARY specifies a VARBINARY type.
	// Properties: 22, IsQuoted, IsBinary.
	Type_VARBINARY Type = 10262
	// CHAR specifies a CHAR type.
	// Properties: 23, IsQuoted, IsText.
	Type_CHAR Type = 6167
	// BINARY specifies a BINARY type.
	// Properties: 24, IsQuoted, IsBinary.
	Type_BINARY Type = 10264
	// BIT specifies a BIT type.
	// Properties: 25, IsQuoted.
	Type_BIT Type = 2073
	// ENUM specifies an ENUM type.
	// Properties: 26, IsQuoted.
	Type_ENUM Type = 2074
	// SET specifies a SET type.
	// Properties: 27, IsQuoted.
	Type_SET Type = 2075
	// TUPLE specifies a tuple. This cannot
	// be returned in a QueryResult, but it can
	// be sent as a bind var.
	// Properties: 28, None.
	Type_TUPLE Type = 28
	// GEOMETRY specifies a GEOMETRY type.
	// Properties: 29, IsQuoted.
	Type_GEOMETRY Type = 2077
	// JSON specifies a JSON type.
	// Properties: 30, IsQuoted.
	Type_JSON Type = 2078
	// EXPRESSION specifies a SQL expression.
	// This type is for internal use only.
	// Properties: 31, None.
	Type_EXPRESSION Type = 31
)

var Type_name = map[int32]string{
	0:     "NULL_TYPE",
	257:   "INT8",
	770:   "UINT8",
	259:   "INT16",
	772:   "UINT16",
	261:   "INT24",
	774:   "UINT24",
	263:   "INT32",
	776:   "UINT32",
	265:   "INT64",
	778:   "UINT64",
	1035:  "FLOAT32",
	1036:  "FLOAT64",
	2061:  "TIMESTAMP",
	2062:  "DATE",
	2063:  "TIME",
	2064:  "DATETIME",
	785:   "YEAR",
	18:    "DECIMAL",
	6163:  "TEXT",
	10260: "BLOB",
	6165:  "VARCHAR",
	10262: "VARBINARY",
	6167:  "CHAR",
	10264: "BINARY",
	2073:  "BIT",
	2074:  "ENUM",
	2075:  "SET",
	28:    "TUPLE",
	2077:  "GEOMETRY",
	2078:  "JSON",
	31:    "EXPRESSION",
}

var Type_value = map[string]int32{
	"NULL_TYPE":  0,
	"INT8":       257,
	"UINT8":      770,
	"INT16":      259,
	"UINT16":     772,
	"INT24":      261,
	"UINT24":     774,
	"INT32":      263,
	"UINT32":     776,
	"INT64":      265,
	"UINT64":     778,
	"FLOAT32":    1035,
	"FLOAT64":    1036,
	"TIMESTAMP":  2061,
	"DATE":       2062,
	"TIME":       2063,
	"DATETIME":   2064,
	"YEAR":       785,
	"DECIMAL":    18,
	"TEXT":       6163,
	"BLOB":       10260,
	"VARCHAR":    6165,
	"VARBINARY":  10262,
	"CHAR":       6167,
	"BINARY":     10264,
	"BIT":        2073,
	"ENUM":       2074,
	"SET":        2075,
	"TUPLE":      28,
	"GEOMETRY":   2077,
	"JSON":       2078,
	"EXPRESSION": 31,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}

func (Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{2}
}

type ExecuteOptions_IncludedFields int32

const (
	ExecuteOptions_TYPE_AND_NAME ExecuteOptions_IncludedFields = 0
	ExecuteOptions_TYPE_ONLY     ExecuteOptions_IncludedFields = 1
	ExecuteOptions_ALL           ExecuteOptions_IncludedFields = 2
)

var ExecuteOptions_IncludedFields_name = map[int32]string{
	0: "TYPE_AND_NAME",
	1: "TYPE_ONLY",
	2: "ALL",
}

var ExecuteOptions_IncludedFields_value = map[string]int32{
	"TYPE_AND_NAME": 0,
	"TYPE_ONLY":     1,
	"ALL":           2,
}

func (x ExecuteOptions_IncludedFields) String() string {
	return proto.EnumName(ExecuteOptions_IncludedFields_name, int32(x))
}

func (ExecuteOptions_IncludedFields) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{6, 0}
}

type ExecuteOptions_Workload int32

const (
	ExecuteOptions_UNSPECIFIED ExecuteOptions_Workload = 0
	ExecuteOptions_OLTP        ExecuteOptions_Workload = 1
	ExecuteOptions_OLAP        ExecuteOptions_Workload = 2
	ExecuteOptions_DBA         ExecuteOptions_Workload = 3
)

var ExecuteOptions_Workload_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "OLTP",
	2: "OLAP",
	3: "DBA",
}

var ExecuteOptions_Workload_value = map[string]int32{
	"UNSPECIFIED": 0,
	"OLTP":        1,
	"OLAP":        2,
	"DBA":         3,
}

func (x ExecuteOptions_Workload) String() string {
	return proto.EnumName(ExecuteOptions_Workload_name, int32(x))
}

func (ExecuteOptions_Workload) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{6, 1}
}

type ExecuteOptions_TransactionIsolation int32

const (
	ExecuteOptions_DEFAULT          ExecuteOptions_TransactionIsolation = 0
	ExecuteOptions_REPEATABLE_READ  ExecuteOptions_TransactionIsolation = 1
	ExecuteOptions_READ_COMMITTED   ExecuteOptions_TransactionIsolation = 2
	ExecuteOptions_READ_UNCOMMITTED ExecuteOptions_TransactionIsolation = 3
	ExecuteOptions_SERIALIZABLE     ExecuteOptions_TransactionIsolation = 4
	// This is not an "official" transaction level but it will do a
	// START TRANSACTION WITH CONSISTENT SNAPSHOT, READ ONLY
	ExecuteOptions_CONSISTENT_SNAPSHOT_READ_ONLY ExecuteOptions_TransactionIsolation = 5
	// This not an "official" transaction level, it will send queries to mysql
	// without wrapping them in a transaction
	ExecuteOptions_AUTOCOMMIT ExecuteOptions_TransactionIsolation = 6
)

var ExecuteOptions_TransactionIsolation_name = map[int32]string{
	0: "DEFAULT",
	1: "REPEATABLE_READ",
	2: "READ_COMMITTED",
	3: "READ_UNCOMMITTED",
	4: "SERIALIZABLE",
	5: "CONSISTENT_SNAPSHOT_READ_ONLY",
	6: "AUTOCOMMIT",
}

var ExecuteOptions_TransactionIsolation_value = map[string]int32{
	"DEFAULT":                       0,
	"REPEATABLE_READ":               1,
	"READ_COMMITTED":                2,
	"READ_UNCOMMITTED":              3,
	"SERIALIZABLE":                  4,
	"CONSISTENT_SNAPSHOT_READ_ONLY": 5,
	"AUTOCOMMIT":                    6,
}

func (x ExecuteOptions_TransactionIsolation) String() string {
	return proto.EnumName(ExecuteOptions_TransactionIsolation_name, int32(x))
}

func (ExecuteOptions_TransactionIsolation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{6, 2}
}

// The category of one statement.
type StreamEvent_Statement_Category int32

const (
	StreamEvent_Statement_Error StreamEvent_Statement_Category = 0
	StreamEvent_Statement_DML   StreamEvent_Statement_Category = 1
	StreamEvent_Statement_DDL   StreamEvent_Statement_Category = 2
)

var StreamEvent_Statement_Category_name = map[int32]string{
	0: "Error",
	1: "DML",
	2: "DDL",
}

var StreamEvent_Statement_Category_value = map[string]int32{
	"Error": 0,
	"DML":   1,
	"DDL":   2,
}

func (x StreamEvent_Statement_Category) String() string {
	return proto.EnumName(StreamEvent_Statement_Category_name, int32(x))
}

func (StreamEvent_Statement_Category) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{12, 0, 0}
}

// Target describes what the client expects the tablet is.
// If the tablet does not match, an error is returned.
type Target struct {
	Keyspace string `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Shard    string `protobuf:"bytes,2,opt,name=shard,proto3" json:"shard,omitempty"`
	// cell is used for routing queries between vtgate and vttablets. It
	// is not used when Target is part of the Session sent by the client.
	Cell                 string   `protobuf:"bytes,3,opt,name=cell,proto3" json:"cell,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Target) Reset()         { *m = Target{} }
func (m *Target) String() string { return proto.CompactTextString(m) }
func (*Target) ProtoMessage()    {}
func (*Target) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{0}
}

func (m *Target) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Target.Unmarshal(m, b)
}
func (m *Target) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Target.Marshal(b, m, deterministic)
}
func (m *Target) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Target.Merge(m, src)
}
func (m *Target) XXX_Size() int {
	return xxx_messageInfo_Target.Size(m)
}
func (m *Target) XXX_DiscardUnknown() {
	xxx_messageInfo_Target.DiscardUnknown(m)
}

var xxx_messageInfo_Target proto.InternalMessageInfo

func (m *Target) GetKeyspace() string {
	if m != nil {
		return m.Keyspace
	}
	return ""
}

func (m *Target) GetShard() string {
	if m != nil {
		return m.Shard
	}
	return ""
}

func (m *Target) GetCell() string {
	if m != nil {
		return m.Cell
	}
	return ""
}

// VTGateCallerID is sent by VTGate to VTTablet to describe the
// caller. If possible, this information is secure. For instance,
// if using unique certificates that guarantee that VTGate->VTTablet
// traffic cannot be spoofed, then VTTablet can trust this information,
// and VTTablet will use it for tablet ACLs, for instance.
// Because of this security guarantee, this is different than the CallerID
// structure, which is not secure at all, because it is provided
// by the Vitess client.
type VTGateCallerID struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Groups               []string `protobuf:"bytes,2,rep,name=groups,proto3" json:"groups,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VTGateCallerID) Reset()         { *m = VTGateCallerID{} }
func (m *VTGateCallerID) String() string { return proto.CompactTextString(m) }
func (*VTGateCallerID) ProtoMessage()    {}
func (*VTGateCallerID) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{1}
}

func (m *VTGateCallerID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VTGateCallerID.Unmarshal(m, b)
}
func (m *VTGateCallerID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VTGateCallerID.Marshal(b, m, deterministic)
}
func (m *VTGateCallerID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VTGateCallerID.Merge(m, src)
}
func (m *VTGateCallerID) XXX_Size() int {
	return xxx_messageInfo_VTGateCallerID.Size(m)
}
func (m *VTGateCallerID) XXX_DiscardUnknown() {
	xxx_messageInfo_VTGateCallerID.DiscardUnknown(m)
}

var xxx_messageInfo_VTGateCallerID proto.InternalMessageInfo

func (m *VTGateCallerID) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *VTGateCallerID) GetGroups() []string {
	if m != nil {
		return m.Groups
	}
	return nil
}

// EventToken is a structure that describes a point in time in a
// replication stream on one shard. The most recent known replication
// position can be retrieved from vttablet when executing a query. It
// is also sent with the replication streams from the binlog service.
type EventToken struct {
	// timestamp is the MySQL timestamp of the statements. Seconds since Epoch.
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The shard name that applied the statements. Note this is not set when
	// streaming from a vttablet. It is only used on the client -> vtgate link.
	Shard string `protobuf:"bytes,2,opt,name=shard,proto3" json:"shard,omitempty"`
	// The position on the replication stream after this statement was applied.
	// It is not the transaction ID / GTID, but the position / GTIDSet.
	Position             string   `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventToken) Reset()         { *m = EventToken{} }
func (m *EventToken) String() string { return proto.CompactTextString(m) }
func (*EventToken) ProtoMessage()    {}
func (*EventToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{2}
}

func (m *EventToken) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventToken.Unmarshal(m, b)
}
func (m *EventToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventToken.Marshal(b, m, deterministic)
}
func (m *EventToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventToken.Merge(m, src)
}
func (m *EventToken) XXX_Size() int {
	return xxx_messageInfo_EventToken.Size(m)
}
func (m *EventToken) XXX_DiscardUnknown() {
	xxx_messageInfo_EventToken.DiscardUnknown(m)
}

var xxx_messageInfo_EventToken proto.InternalMessageInfo

func (m *EventToken) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *EventToken) GetShard() string {
	if m != nil {
		return m.Shard
	}
	return ""
}

func (m *EventToken) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

// Value represents a typed value.
type Value struct {
	Type                 Type     `protobuf:"varint,1,opt,name=type,proto3,enum=query.Type" json:"type,omitempty"`
	Value                []byte   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Value) Reset()         { *m = Value{} }
func (m *Value) String() string { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()    {}
func (*Value) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{3}
}

func (m *Value) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Value.Unmarshal(m, b)
}
func (m *Value) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Value.Marshal(b, m, deterministic)
}
func (m *Value) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Value.Merge(m, src)
}
func (m *Value) XXX_Size() int {
	return xxx_messageInfo_Value.Size(m)
}
func (m *Value) XXX_DiscardUnknown() {
	xxx_messageInfo_Value.DiscardUnknown(m)
}

var xxx_messageInfo_Value proto.InternalMessageInfo

func (m *Value) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_NULL_TYPE
}

func (m *Value) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// BindVariable represents a single bind variable in a Query.
type BindVariable struct {
	Type  Type   `protobuf:"varint,1,opt,name=type,proto3,enum=query.Type" json:"type,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// values are set if type is TUPLE.
	Values               []*Value `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BindVariable) Reset()         { *m = BindVariable{} }
func (m *BindVariable) String() string { return proto.CompactTextString(m) }
func (*BindVariable) ProtoMessage()    {}
func (*BindVariable) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{4}
}

func (m *BindVariable) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BindVariable.Unmarshal(m, b)
}
func (m *BindVariable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BindVariable.Marshal(b, m, deterministic)
}
func (m *BindVariable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BindVariable.Merge(m, src)
}
func (m *BindVariable) XXX_Size() int {
	return xxx_messageInfo_BindVariable.Size(m)
}
func (m *BindVariable) XXX_DiscardUnknown() {
	xxx_messageInfo_BindVariable.DiscardUnknown(m)
}

var xxx_messageInfo_BindVariable proto.InternalMessageInfo

func (m *BindVariable) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_NULL_TYPE
}

func (m *BindVariable) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *BindVariable) GetValues() []*Value {
	if m != nil {
		return m.Values
	}
	return nil
}

// BoundQuery is a query with its bind variables
type BoundQuery struct {
	// sql is the SQL query to execute
	Sql string `protobuf:"bytes,1,opt,name=sql,proto3" json:"sql,omitempty"`
	// bind_variables is a map of all bind variables to expand in the query.
	// nil values are not allowed. Use NULL_TYPE to express a NULL value.
	BindVariables        map[string]*BindVariable `protobuf:"bytes,2,rep,name=bind_variables,json=bindVariables,proto3" json:"bind_variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *BoundQuery) Reset()         { *m = BoundQuery{} }
func (m *BoundQuery) String() string { return proto.CompactTextString(m) }
func (*BoundQuery) ProtoMessage()    {}
func (*BoundQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{5}
}

func (m *BoundQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BoundQuery.Unmarshal(m, b)
}
func (m *BoundQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BoundQuery.Marshal(b, m, deterministic)
}
func (m *BoundQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoundQuery.Merge(m, src)
}
func (m *BoundQuery) XXX_Size() int {
	return xxx_messageInfo_BoundQuery.Size(m)
}
func (m *BoundQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_BoundQuery.DiscardUnknown(m)
}

var xxx_messageInfo_BoundQuery proto.InternalMessageInfo

func (m *BoundQuery) GetSql() string {
	if m != nil {
		return m.Sql
	}
	return ""
}

func (m *BoundQuery) GetBindVariables() map[string]*BindVariable {
	if m != nil {
		return m.BindVariables
	}
	return nil
}

// ExecuteOptions is passed around for all Execute calls.
type ExecuteOptions struct {
	// If set, we will try to include an EventToken with the responses.
	IncludeEventToken bool `protobuf:"varint,2,opt,name=include_event_token,json=includeEventToken,proto3" json:"include_event_token,omitempty"`
	// If set, the fresher field may be set as a result comparison to this token.
	// This is a shortcut so the application doesn't need to care about
	// comparing EventTokens.
	CompareEventToken *EventToken `protobuf:"bytes,3,opt,name=compare_event_token,json=compareEventToken,proto3" json:"compare_event_token,omitempty"`
	// Controls what fields are returned in Field message responses from mysql, i.e.
	// field name, table name, etc. This is an optimization for high-QPS queries where
	// the client knows what it's getting
	IncludedFields ExecuteOptions_IncludedFields `protobuf:"varint,4,opt,name=included_fields,json=includedFields,proto3,enum=query.ExecuteOptions_IncludedFields" json:"included_fields,omitempty"`
	// client_rows_found specifies if rows_affected should return
	// rows found instead of rows affected. Behavior is defined
	// by MySQL's CLIENT_FOUND_ROWS flag.
	ClientFoundRows bool `protobuf:"varint,5,opt,name=client_found_rows,json=clientFoundRows,proto3" json:"client_found_rows,omitempty"`
	// workload specifies the type of workload:
	// OLTP: DMLs allowed, results have row count limit, and
	// query timeouts are shorter.
	// OLAP: DMLS not allowed, no limit on row count, timeouts
	// can be as high as desired.
	// DBA: no limit on rowcount or timeout, all queries allowed
	// but intended for long DMLs and DDLs.
	Workload ExecuteOptions_Workload `protobuf:"varint,6,opt,name=workload,proto3,enum=query.ExecuteOptions_Workload" json:"workload,omitempty"`
	// sql_select_limit sets an implicit limit on all select statements. Since
	// vitess also sets a rowcount limit on queries, the smallest value wins.
	SqlSelectLimit       int64                               `protobuf:"varint,8,opt,name=sql_select_limit,json=sqlSelectLimit,proto3" json:"sql_select_limit,omitempty"`
	TransactionIsolation ExecuteOptions_TransactionIsolation `protobuf:"varint,9,opt,name=transaction_isolation,json=transactionIsolation,proto3,enum=query.ExecuteOptions_TransactionIsolation" json:"transaction_isolation,omitempty"`
	// skip_query_plan_cache specifies if the query plan should be cached by vitess.
	// By default all query plans are cached.
	SkipQueryPlanCache   bool     `protobuf:"varint,10,opt,name=skip_query_plan_cache,json=skipQueryPlanCache,proto3" json:"skip_query_plan_cache,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExecuteOptions) Reset()         { *m = ExecuteOptions{} }
func (m *ExecuteOptions) String() string { return proto.CompactTextString(m) }
func (*ExecuteOptions) ProtoMessage()    {}
func (*ExecuteOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{6}
}

func (m *ExecuteOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecuteOptions.Unmarshal(m, b)
}
func (m *ExecuteOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecuteOptions.Marshal(b, m, deterministic)
}
func (m *ExecuteOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteOptions.Merge(m, src)
}
func (m *ExecuteOptions) XXX_Size() int {
	return xxx_messageInfo_ExecuteOptions.Size(m)
}
func (m *ExecuteOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteOptions proto.InternalMessageInfo

func (m *ExecuteOptions) GetIncludeEventToken() bool {
	if m != nil {
		return m.IncludeEventToken
	}
	return false
}

func (m *ExecuteOptions) GetCompareEventToken() *EventToken {
	if m != nil {
		return m.CompareEventToken
	}
	return nil
}

func (m *ExecuteOptions) GetIncludedFields() ExecuteOptions_IncludedFields {
	if m != nil {
		return m.IncludedFields
	}
	return ExecuteOptions_TYPE_AND_NAME
}

func (m *ExecuteOptions) GetClientFoundRows() bool {
	if m != nil {
		return m.ClientFoundRows
	}
	return false
}

func (m *ExecuteOptions) GetWorkload() ExecuteOptions_Workload {
	if m != nil {
		return m.Workload
	}
	return ExecuteOptions_UNSPECIFIED
}

func (m *ExecuteOptions) GetSqlSelectLimit() int64 {
	if m != nil {
		return m.SqlSelectLimit
	}
	return 0
}

func (m *ExecuteOptions) GetTransactionIsolation() ExecuteOptions_TransactionIsolation {
	if m != nil {
		return m.TransactionIsolation
	}
	return ExecuteOptions_DEFAULT
}

func (m *ExecuteOptions) GetSkipQueryPlanCache() bool {
	if m != nil {
		return m.SkipQueryPlanCache
	}
	return false
}

// Field describes a single column returned by a query
type Field struct {
	// name of the field as returned by mysql C API
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// vitess-defined type. Conversion function is in sqltypes package.
	Type Type `protobuf:"varint,2,opt,name=type,proto3,enum=query.Type" json:"type,omitempty"`
	// Remaining fields from mysql C API.
	// These fields are only populated when ExecuteOptions.included_fields
	// is set to IncludedFields.ALL.
	Table    string `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`
	OrgTable string `protobuf:"bytes,4,opt,name=org_table,json=orgTable,proto3" json:"org_table,omitempty"`
	Database string `protobuf:"bytes,5,opt,name=database,proto3" json:"database,omitempty"`
	OrgName  string `protobuf:"bytes,6,opt,name=org_name,json=orgName,proto3" json:"org_name,omitempty"`
	// column_length is really a uint32. All 32 bits can be used.
	ColumnLength uint32 `protobuf:"varint,7,opt,name=column_length,json=columnLength,proto3" json:"column_length,omitempty"`
	// charset is actually a uint16. Only the lower 16 bits are used.
	Charset uint32 `protobuf:"varint,8,opt,name=charset,proto3" json:"charset,omitempty"`
	// decimals is actually a uint8. Only the lower 8 bits are used.
	Decimals uint32 `protobuf:"varint,9,opt,name=decimals,proto3" json:"decimals,omitempty"`
	// flags is actually a uint16. Only the lower 16 bits are used.
	Flags                uint32   `protobuf:"varint,10,opt,name=flags,proto3" json:"flags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Field) Reset()         { *m = Field{} }
func (m *Field) String() string { return proto.CompactTextString(m) }
func (*Field) ProtoMessage()    {}
func (*Field) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{7}
}

func (m *Field) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Field.Unmarshal(m, b)
}
func (m *Field) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Field.Marshal(b, m, deterministic)
}
func (m *Field) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Field.Merge(m, src)
}
func (m *Field) XXX_Size() int {
	return xxx_messageInfo_Field.Size(m)
}
func (m *Field) XXX_DiscardUnknown() {
	xxx_messageInfo_Field.DiscardUnknown(m)
}

var xxx_messageInfo_Field proto.InternalMessageInfo

func (m *Field) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Field) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_NULL_TYPE
}

func (m *Field) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *Field) GetOrgTable() string {
	if m != nil {
		return m.OrgTable
	}
	return ""
}

func (m *Field) GetDatabase() string {
	if m != nil {
		return m.Database
	}
	return ""
}

func (m *Field) GetOrgName() string {
	if m != nil {
		return m.OrgName
	}
	return ""
}

func (m *Field) GetColumnLength() uint32 {
	if m != nil {
		return m.ColumnLength
	}
	return 0
}

func (m *Field) GetCharset() uint32 {
	if m != nil {
		return m.Charset
	}
	return 0
}

func (m *Field) GetDecimals() uint32 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

func (m *Field) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

// Row is a database row.
type Row struct {
	// lengths contains the length of each value in values.
	// A length of -1 means that the field is NULL. While
	// reading values, you have to accummulate the length
	// to know the offset where the next value begins in values.
	Lengths []int64 `protobuf:"zigzag64,1,rep,packed,name=lengths,proto3" json:"lengths,omitempty"`
	// values contains a concatenation of all values in the row.
	Values               []byte   `protobuf:"bytes,2,opt,name=values,proto3" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Row) Reset()         { *m = Row{} }
func (m *Row) String() string { return proto.CompactTextString(m) }
func (*Row) ProtoMessage()    {}
func (*Row) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{8}
}

func (m *Row) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Row.Unmarshal(m, b)
}
func (m *Row) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Row.Marshal(b, m, deterministic)
}
func (m *Row) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Row.Merge(m, src)
}
func (m *Row) XXX_Size() int {
	return xxx_messageInfo_Row.Size(m)
}
func (m *Row) XXX_DiscardUnknown() {
	xxx_messageInfo_Row.DiscardUnknown(m)
}

var xxx_messageInfo_Row proto.InternalMessageInfo

func (m *Row) GetLengths() []int64 {
	if m != nil {
		return m.Lengths
	}
	return nil
}

func (m *Row) GetValues() []byte {
	if m != nil {
		return m.Values
	}
	return nil
}

// ResultExtras contains optional out-of-band information. Usually the
// extras are requested by adding ExecuteOptions flags.
type ResultExtras struct {
	// event_token is populated if the include_event_token flag is set
	// in ExecuteOptions.
	EventToken *EventToken `protobuf:"bytes,1,opt,name=event_token,json=eventToken,proto3" json:"event_token,omitempty"`
	// If set, it means the data returned with this result is fresher
	// than the compare_token passed in the ExecuteOptions.
	Fresher              bool     `protobuf:"varint,2,opt,name=fresher,proto3" json:"fresher,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResultExtras) Reset()         { *m = ResultExtras{} }
func (m *ResultExtras) String() string { return proto.CompactTextString(m) }
func (*ResultExtras) ProtoMessage()    {}
func (*ResultExtras) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{9}
}

func (m *ResultExtras) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResultExtras.Unmarshal(m, b)
}
func (m *ResultExtras) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResultExtras.Marshal(b, m, deterministic)
}
func (m *ResultExtras) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResultExtras.Merge(m, src)
}
func (m *ResultExtras) XXX_Size() int {
	return xxx_messageInfo_ResultExtras.Size(m)
}
func (m *ResultExtras) XXX_DiscardUnknown() {
	xxx_messageInfo_ResultExtras.DiscardUnknown(m)
}

var xxx_messageInfo_ResultExtras proto.InternalMessageInfo

func (m *ResultExtras) GetEventToken() *EventToken {
	if m != nil {
		return m.EventToken
	}
	return nil
}

func (m *ResultExtras) GetFresher() bool {
	if m != nil {
		return m.Fresher
	}
	return false
}

// QueryResult is returned by Execute and ExecuteStream.
//
// As returned by Execute, len(fields) is always equal to len(row)
// (for each row in rows).
//
// As returned by StreamExecute, the first QueryResult has the fields
// set, and subsequent QueryResult have rows set. And as Execute,
// len(QueryResult[0].fields) is always equal to len(row) (for each
// row in rows for each QueryResult in QueryResult[1:]).
type QueryResult struct {
	Fields               []*Field      `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	RowsAffected         uint64        `protobuf:"varint,2,opt,name=rows_affected,json=rowsAffected,proto3" json:"rows_affected,omitempty"`
	InsertId             uint64        `protobuf:"varint,3,opt,name=insert_id,json=insertId,proto3" json:"insert_id,omitempty"`
	Rows                 []*Row        `protobuf:"bytes,4,rep,name=rows,proto3" json:"rows,omitempty"`
	Extras               *ResultExtras `protobuf:"bytes,5,opt,name=extras,proto3" json:"extras,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *QueryResult) Reset()         { *m = QueryResult{} }
func (m *QueryResult) String() string { return proto.CompactTextString(m) }
func (*QueryResult) ProtoMessage()    {}
func (*QueryResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{10}
}

func (m *QueryResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryResult.Unmarshal(m, b)
}
func (m *QueryResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryResult.Marshal(b, m, deterministic)
}
func (m *QueryResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResult.Merge(m, src)
}
func (m *QueryResult) XXX_Size() int {
	return xxx_messageInfo_QueryResult.Size(m)
}
func (m *QueryResult) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResult.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResult proto.InternalMessageInfo

func (m *QueryResult) GetFields() []*Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *QueryResult) GetRowsAffected() uint64 {
	if m != nil {
		return m.RowsAffected
	}
	return 0
}

func (m *QueryResult) GetInsertId() uint64 {
	if m != nil {
		return m.InsertId
	}
	return 0
}

func (m *QueryResult) GetRows() []*Row {
	if m != nil {
		return m.Rows
	}
	return nil
}

func (m *QueryResult) GetExtras() *ResultExtras {
	if m != nil {
		return m.Extras
	}
	return nil
}

// QueryWarning is used to convey out of band query execution warnings
// by storing in the vtgate.Session
type QueryWarning struct {
	Code                 uint32   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryWarning) Reset()         { *m = QueryWarning{} }
func (m *QueryWarning) String() string { return proto.CompactTextString(m) }
func (*QueryWarning) ProtoMessage()    {}
func (*QueryWarning) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{11}
}

func (m *QueryWarning) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryWarning.Unmarshal(m, b)
}
func (m *QueryWarning) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryWarning.Marshal(b, m, deterministic)
}
func (m *QueryWarning) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWarning.Merge(m, src)
}
func (m *QueryWarning) XXX_Size() int {
	return xxx_messageInfo_QueryWarning.Size(m)
}
func (m *QueryWarning) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWarning.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWarning proto.InternalMessageInfo

func (m *QueryWarning) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *QueryWarning) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// StreamEvent describes a set of transformations that happened as a
// single transactional unit on a server. It is streamed back by the
// Update Stream calls.
type StreamEvent struct {
	// The statements in this transaction.
	Statements []*StreamEvent_Statement `protobuf:"bytes,1,rep,name=statements,proto3" json:"statements,omitempty"`
	// The Event Token for this event.
	EventToken           *EventToken `protobuf:"bytes,2,opt,name=event_token,json=eventToken,proto3" json:"event_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *StreamEvent) Reset()         { *m = StreamEvent{} }
func (m *StreamEvent) String() string { return proto.CompactTextString(m) }
func (*StreamEvent) ProtoMessage()    {}
func (*StreamEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{12}
}

func (m *StreamEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamEvent.Unmarshal(m, b)
}
func (m *StreamEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamEvent.Marshal(b, m, deterministic)
}
func (m *StreamEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamEvent.Merge(m, src)
}
func (m *StreamEvent) XXX_Size() int {
	return xxx_messageInfo_StreamEvent.Size(m)
}
func (m *StreamEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamEvent.DiscardUnknown(m)
}

var xxx_messageInfo_StreamEvent proto.InternalMessageInfo

func (m *StreamEvent) GetStatements() []*StreamEvent_Statement {
	if m != nil {
		return m.Statements
	}
	return nil
}

func (m *StreamEvent) GetEventToken() *EventToken {
	if m != nil {
		return m.EventToken
	}
	return nil
}

// One individual Statement in a transaction.
type StreamEvent_Statement struct {
	Category StreamEvent_Statement_Category `protobuf:"varint,1,opt,name=category,proto3,enum=query.StreamEvent_Statement_Category" json:"category,omitempty"`
	// table_name, primary_key_fields and primary_key_values are set for DML.
	TableName        string   `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	PrimaryKeyFields []*Field `protobuf:"bytes,3,rep,name=primary_key_fields,json=primaryKeyFields,proto3" json:"primary_key_fields,omitempty"`
	PrimaryKeyValues []*Row   `protobuf:"bytes,4,rep,name=primary_key_values,json=primaryKeyValues,proto3" json:"primary_key_values,omitempty"`
	// sql is set for all queries.
	// FIXME(alainjobart) we may not need it for DMLs.
	Sql                  []byte   `protobuf:"bytes,5,opt,name=sql,proto3" json:"sql,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamEvent_Statement) Reset()         { *m = StreamEvent_Statement{} }
func (m *StreamEvent_Statement) String() string { return proto.CompactTextString(m) }
func (*StreamEvent_Statement) ProtoMessage()    {}
func (*StreamEvent_Statement) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{12, 0}
}

func (m *StreamEvent_Statement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamEvent_Statement.Unmarshal(m, b)
}
func (m *StreamEvent_Statement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamEvent_Statement.Marshal(b, m, deterministic)
}
func (m *StreamEvent_Statement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamEvent_Statement.Merge(m, src)
}
func (m *StreamEvent_Statement) XXX_Size() int {
	return xxx_messageInfo_StreamEvent_Statement.Size(m)
}
func (m *StreamEvent_Statement) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamEvent_Statement.DiscardUnknown(m)
}

var xxx_messageInfo_StreamEvent_Statement proto.InternalMessageInfo

func (m *StreamEvent_Statement) GetCategory() StreamEvent_Statement_Category {
	if m != nil {
		return m.Category
	}
	return StreamEvent_Statement_Error
}

func (m *StreamEvent_Statement) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *StreamEvent_Statement) GetPrimaryKeyFields() []*Field {
	if m != nil {
		return m.PrimaryKeyFields
	}
	return nil
}

func (m *StreamEvent_Statement) GetPrimaryKeyValues() []*Row {
	if m != nil {
		return m.PrimaryKeyValues
	}
	return nil
}

func (m *StreamEvent_Statement) GetSql() []byte {
	if m != nil {
		return m.Sql
	}
	return nil
}

// ResultWithError represents a query response
// in the form of result or error but not both.
// TODO: To be used in ExecuteBatchResponse and BeginExecuteBatchResponse.
type ResultWithError struct {
	// error contains an query level error, only set if result is unset.
	Error *RPCError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// result contains the query result, only set if error is unset.
	Result               *QueryResult `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ResultWithError) Reset()         { *m = ResultWithError{} }
func (m *ResultWithError) String() string { return proto.CompactTextString(m) }
func (*ResultWithError) ProtoMessage()    {}
func (*ResultWithError) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{13}
}

func (m *ResultWithError) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResultWithError.Unmarshal(m, b)
}
func (m *ResultWithError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResultWithError.Marshal(b, m, deterministic)
}
func (m *ResultWithError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResultWithError.Merge(m, src)
}
func (m *ResultWithError) XXX_Size() int {
	return xxx_messageInfo_ResultWithError.Size(m)
}
func (m *ResultWithError) XXX_DiscardUnknown() {
	xxx_messageInfo_ResultWithError.DiscardUnknown(m)
}

var xxx_messageInfo_ResultWithError proto.InternalMessageInfo

func (m *ResultWithError) GetError() *RPCError {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResultWithError) GetResult() *QueryResult {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterEnum("query.MySqlFlag", MySqlFlag_name, MySqlFlag_value)
	proto.RegisterEnum("query.Flag", Flag_name, Flag_value)
	proto.RegisterEnum("query.Type", Type_name, Type_value)
	proto.RegisterEnum("query.ExecuteOptions_IncludedFields", ExecuteOptions_IncludedFields_name, ExecuteOptions_IncludedFields_value)
	proto.RegisterEnum("query.ExecuteOptions_Workload", ExecuteOptions_Workload_name, ExecuteOptions_Workload_value)
	proto.RegisterEnum("query.ExecuteOptions_TransactionIsolation", ExecuteOptions_TransactionIsolation_name, ExecuteOptions_TransactionIsolation_value)
	proto.RegisterEnum("query.StreamEvent_Statement_Category", StreamEvent_Statement_Category_name, StreamEvent_Statement_Category_value)
	proto.RegisterType((*Target)(nil), "query.Target")
	proto.RegisterType((*VTGateCallerID)(nil), "query.VTGateCallerID")
	proto.RegisterType((*EventToken)(nil), "query.EventToken")
	proto.RegisterType((*Value)(nil), "query.Value")
	proto.RegisterType((*BindVariable)(nil), "query.BindVariable")
	proto.RegisterType((*BoundQuery)(nil), "query.BoundQuery")
	proto.RegisterMapType((map[string]*BindVariable)(nil), "query.BoundQuery.BindVariablesEntry")
	proto.RegisterType((*ExecuteOptions)(nil), "query.ExecuteOptions")
	proto.RegisterType((*Field)(nil), "query.Field")
	proto.RegisterType((*Row)(nil), "query.Row")
	proto.RegisterType((*ResultExtras)(nil), "query.ResultExtras")
	proto.RegisterType((*QueryResult)(nil), "query.QueryResult")
	proto.RegisterType((*QueryWarning)(nil), "query.QueryWarning")
	proto.RegisterType((*StreamEvent)(nil), "query.StreamEvent")
	proto.RegisterType((*StreamEvent_Statement)(nil), "query.StreamEvent.Statement")
	proto.RegisterType((*ResultWithError)(nil), "query.ResultWithError")
}

func init() { proto.RegisterFile("query.proto", fileDescriptor_5c6ac9b241082464) }

var fileDescriptor_5c6ac9b241082464 = []byte{
	// 1836 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xeb, 0x6f, 0xdb, 0xd6,
	0x15, 0xb7, 0x9e, 0xa6, 0x8e, 0x2c, 0xf9, 0xfa, 0x3a, 0xd9, 0x34, 0x2f, 0x6d, 0x3d, 0xad, 0xc5,
	0x3c, 0x0f, 0x30, 0x52, 0x25, 0xc8, 0x82, 0xac, 0x18, 0x42, 0x4b, 0xb4, 0xcb, 0x86, 0x22, 0x99,
	0x4b, 0xca, 0xa9, 0x8b, 0x02, 0x04, 0x23, 0x5d, 0xcb, 0x84, 0x29, 0x51, 0x21, 0xe9, 0xa4, 0xfa,
	0xe6, 0xbd, 0xdf, 0xef, 0x47, 0xd7, 0x0d, 0xeb, 0xf6, 0x6d, 0xff, 0xc7, 0xfe, 0xb2, 0xe1, 0x5c,
	0x5e, 0x4a, 0xf2, 0xea, 0x16, 0xc3, 0xbe, 0xdd, 0xf3, 0x3b, 0xe7, 0x9e, 0xe7, 0xe5, 0xef, 0x48,
	0x50, 0x7f, 0x71, 0xc9, 0xe3, 0xf9, 0xc1, 0x2c, 0x8e, 0xd2, 0x88, 0x56, 0x84, 0xb0, 0x53, 0x7f,
	0x99, 0xc6, 0xb3, 0x61, 0x86, 0xb5, 0x4d, 0xa8, 0xba, 0x7e, 0x3c, 0xe6, 0x29, 0xdd, 0x01, 0xe5,
	0x82, 0xcf, 0x93, 0x99, 0x3f, 0xe4, 0xad, 0xc2, 0x6e, 0x61, 0xaf, 0xc6, 0x16, 0x32, 0xbd, 0x05,
	0x95, 0xe4, 0xdc, 0x8f, 0x47, 0xad, 0xa2, 0x50, 0x64, 0x02, 0xa5, 0x50, 0x1e, 0xf2, 0x30, 0x6c,
	0x95, 0x04, 0x28, 0xce, 0xed, 0x1e, 0x34, 0x4f, 0xdc, 0x63, 0x3f, 0xe5, 0x5d, 0x3f, 0x0c, 0x79,
	0xac, 0xf7, 0xd0, 0xef, 0x65, 0xc2, 0xe3, 0xa9, 0x3f, 0x59, 0xf8, 0xcd, 0x65, 0xfa, 0x25, 0xa8,
	0x8e, 0xe3, 0xe8, 0x72, 0x96, 0xb4, 0x8a, 0xbb, 0xa5, 0xbd, 0x1a, 0x93, 0x52, 0xfb, 0x43, 0x00,
	0xed, 0x25, 0x9f, 0xa6, 0x6e, 0x74, 0xc1, 0xa7, 0xf4, 0x0e, 0xd4, 0xd2, 0x60, 0xc2, 0x93, 0xd4,
	0x9f, 0xcc, 0x84, 0x8b, 0x12, 0x5b, 0x02, 0x9f, 0x93, 0xdb, 0x0e, 0x28, 0xb3, 0x28, 0x09, 0xd2,
	0x20, 0x9a, 0xca, 0xfc, 0x16, 0x72, 0xfb, 0xbb, 0x50, 0x39, 0xf1, 0xc3, 0x4b, 0x4e, 0xdf, 0x80,
	0x72, 0x3a, 0x9f, 0x65, 0x69, 0x35, 0x3b, 0xf5, 0x83, 0xac, 0x59, 0xee, 0x7c, 0xc6, 0x99, 0x50,
	0xa0, 0xef, 0x97, 0x68, 0x29, 0x7c, 0x6f, 0xb0, 0x4c, 0x68, 0x5f, 0xc0, 0xc6, 0x61, 0x30, 0x1d,
	0x9d, 0xf8, 0x71, 0xe0, 0x3f, 0x0f, 0xff, 0x5f, 0x37, 0xf4, 0x4d, 0xa8, 0x8a, 0x43, 0xd2, 0x2a,
	0xed, 0x96, 0xf6, 0xea, 0x9d, 0x0d, 0x79, 0x51, 0xe4, 0xc6, 0xa4, 0xae, 0xfd, 0xef, 0x02, 0xc0,
	0x61, 0x74, 0x39, 0x1d, 0x3d, 0x45, 0x25, 0x25, 0x50, 0x4a, 0x5e, 0x84, 0xb2, 0x91, 0x78, 0xa4,
	0x4f, 0xa0, 0xf9, 0x3c, 0x98, 0x8e, 0xbc, 0x97, 0x32, 0x9d, 0xac, 0x97, 0xf5, 0xce, 0x9b, 0xd2,
	0xdd, 0xf2, 0xf2, 0xc1, 0x6a, 0xd6, 0x89, 0x36, 0x4d, 0xe3, 0x39, 0x6b, 0x3c, 0x5f, 0xc5, 0x76,
	0x06, 0x40, 0x3f, 0x6b, 0x84, 0x41, 0x2f, 0xf8, 0x3c, 0x0f, 0x7a, 0xc1, 0xe7, 0xf4, 0x9b, 0xab,
	0x15, 0xd5, 0x3b, 0xdb, 0x79, 0xac, 0x95, 0xbb, 0xb2, 0xcc, 0x47, 0xc5, 0x87, 0x85, 0xf6, 0x3f,
	0xaa, 0xd0, 0xd4, 0x3e, 0xe2, 0xc3, 0xcb, 0x94, 0x5b, 0x33, 0x9c, 0x41, 0x42, 0x0f, 0x60, 0x3b,
	0x98, 0x0e, 0xc3, 0xcb, 0x11, 0xf7, 0x38, 0x8e, 0xda, 0x4b, 0x71, 0xd6, 0xc2, 0x9f, 0xc2, 0xb6,
	0xa4, 0x6a, 0xe5, 0x11, 0xa8, 0xb0, 0x3d, 0x8c, 0x26, 0x33, 0x3f, 0xbe, 0x6e, 0x5f, 0x12, 0xf1,
	0xb7, 0x64, 0xfc, 0xa5, 0x3d, 0xdb, 0x92, 0xd6, 0x2b, 0x2e, 0xfa, 0xb0, 0x29, 0xfd, 0x8e, 0xbc,
	0xb3, 0x80, 0x87, 0xa3, 0xa4, 0x55, 0x16, 0x23, 0xcb, 0x5b, 0x75, 0x3d, 0xc5, 0x03, 0x5d, 0x1a,
	0x1f, 0x09, 0x5b, 0xd6, 0x0c, 0xae, 0xc9, 0x74, 0x1f, 0xb6, 0x86, 0x61, 0x80, 0xa9, 0x9c, 0x61,
	0x8b, 0xbd, 0x38, 0x7a, 0x95, 0xb4, 0x2a, 0x22, 0xff, 0xcd, 0x4c, 0x71, 0x84, 0x38, 0x8b, 0x5e,
	0x25, 0xf4, 0x11, 0x28, 0xaf, 0xa2, 0xf8, 0x22, 0x8c, 0xfc, 0x51, 0xab, 0x2a, 0x62, 0xbe, 0x7e,
	0x73, 0xcc, 0x67, 0xd2, 0x8a, 0x2d, 0xec, 0xe9, 0x1e, 0x90, 0xe4, 0x45, 0xe8, 0x25, 0x3c, 0xe4,
	0xc3, 0xd4, 0x0b, 0x83, 0x49, 0x90, 0xb6, 0x14, 0xf1, 0x15, 0x34, 0x93, 0x17, 0xa1, 0x23, 0x60,
	0x03, 0x51, 0xea, 0xc1, 0xed, 0x34, 0xf6, 0xa7, 0x89, 0x3f, 0x44, 0x67, 0x5e, 0x90, 0x44, 0xa1,
	0x2f, 0xbe, 0x80, 0x9a, 0x08, 0xb9, 0x7f, 0x73, 0x48, 0x77, 0x79, 0x45, 0xcf, 0x6f, 0xb0, 0x5b,
	0xe9, 0x0d, 0x28, 0x7d, 0x1b, 0x6e, 0x27, 0x17, 0xc1, 0xcc, 0x13, 0x7e, 0xbc, 0x59, 0xe8, 0x4f,
	0xbd, 0xa1, 0x3f, 0x3c, 0xe7, 0x2d, 0x10, 0x65, 0x53, 0x54, 0x8a, 0xa7, 0x66, 0x87, 0xfe, 0xb4,
	0x8b, 0x9a, 0xf6, 0x77, 0xa0, 0x79, 0xbd, 0x8f, 0x74, 0x0b, 0x1a, 0xee, 0xa9, 0xad, 0x79, 0xaa,
	0xd9, 0xf3, 0x4c, 0xb5, 0xaf, 0x91, 0x35, 0xda, 0x80, 0x9a, 0x80, 0x2c, 0xd3, 0x38, 0x25, 0x05,
	0xba, 0x0e, 0x25, 0xd5, 0x30, 0x48, 0xb1, 0xfd, 0x10, 0x94, 0xbc, 0x21, 0x74, 0x13, 0xea, 0x03,
	0xd3, 0xb1, 0xb5, 0xae, 0x7e, 0xa4, 0x6b, 0x3d, 0xb2, 0x46, 0x15, 0x28, 0x5b, 0x86, 0x6b, 0x93,
	0x42, 0x76, 0x52, 0x6d, 0x52, 0xc4, 0x9b, 0xbd, 0x43, 0x95, 0x94, 0xda, 0xff, 0x2a, 0xc0, 0xad,
	0x9b, 0x0a, 0xa3, 0x75, 0x58, 0xef, 0x69, 0x47, 0xea, 0xc0, 0x70, 0xc9, 0x1a, 0xdd, 0x86, 0x4d,
	0xa6, 0xd9, 0x9a, 0xea, 0xaa, 0x87, 0x86, 0xe6, 0x31, 0x4d, 0xed, 0x91, 0x02, 0xa5, 0xd0, 0xc4,
	0x93, 0xd7, 0xb5, 0xfa, 0x7d, 0xdd, 0x75, 0xb5, 0x1e, 0x29, 0xd2, 0x5b, 0x40, 0x04, 0x36, 0x30,
	0x97, 0x68, 0x89, 0x12, 0xd8, 0x70, 0x34, 0xa6, 0xab, 0x86, 0xfe, 0x01, 0x3a, 0x20, 0x65, 0xfa,
	0x35, 0x78, 0xad, 0x6b, 0x99, 0x8e, 0xee, 0xb8, 0x9a, 0xe9, 0x7a, 0x8e, 0xa9, 0xda, 0xce, 0xbb,
	0x96, 0x2b, 0x3c, 0x67, 0xc5, 0x55, 0x68, 0x13, 0x40, 0x1d, 0xb8, 0x56, 0xe6, 0x87, 0x54, 0xdf,
	0x2b, 0x2b, 0x05, 0x52, 0x6c, 0x7f, 0x5c, 0x84, 0x8a, 0xe8, 0x0f, 0xb2, 0xea, 0x0a, 0x57, 0x8a,
	0xf3, 0x82, 0x61, 0x8a, 0x5f, 0xc0, 0x30, 0x29, 0x7e, 0x74, 0x92, 0xeb, 0x32, 0x81, 0x7e, 0x15,
	0x6a, 0x51, 0x3c, 0xf6, 0x32, 0x4d, 0x39, 0x63, 0xc1, 0x28, 0x1e, 0xbb, 0x42, 0xb9, 0x03, 0xca,
	0xc8, 0x4f, 0xfd, 0xe7, 0x7e, 0xc2, 0xc5, 0xab, 0xad, 0xb1, 0x85, 0x4c, 0xbf, 0x02, 0x68, 0xe7,
	0x89, 0x3c, 0xaa, 0x42, 0xb7, 0x1e, 0xc5, 0x63, 0x13, 0x53, 0xf9, 0x3a, 0x34, 0x86, 0x51, 0x78,
	0x39, 0x99, 0x7a, 0x21, 0x9f, 0x8e, 0xd3, 0xf3, 0xd6, 0xfa, 0x6e, 0x61, 0xaf, 0xc1, 0x36, 0x32,
	0xd0, 0x10, 0x18, 0x6d, 0xc1, 0xfa, 0xf0, 0xdc, 0x8f, 0x13, 0x9e, 0xbd, 0xd4, 0x06, 0xcb, 0x45,
	0x11, 0x95, 0x0f, 0x83, 0x89, 0x1f, 0x26, 0xe2, 0x55, 0x36, 0xd8, 0x42, 0xc6, 0x22, 0xce, 0x42,
	0x7f, 0x9c, 0x88, 0xd7, 0xd4, 0x60, 0x99, 0xd0, 0xfe, 0x36, 0x94, 0x58, 0xf4, 0x0a, 0x5d, 0x66,
	0x01, 0x93, 0x56, 0x61, 0xb7, 0xb4, 0x47, 0x59, 0x2e, 0xe2, 0x12, 0x91, 0x3c, 0x9a, 0xd1, 0x6b,
	0xce, 0x9c, 0x1f, 0xc2, 0x06, 0xe3, 0xc9, 0x65, 0x98, 0x6a, 0x1f, 0xa5, 0xb1, 0x9f, 0xd0, 0x0e,
	0xd4, 0x57, 0x99, 0xa3, 0xf0, 0x79, 0xcc, 0x01, 0x7c, 0x49, 0x19, 0x2d, 0x58, 0x3f, 0x8b, 0x79,
	0x72, 0xce, 0x63, 0xc9, 0x4c, 0xb9, 0x88, 0xbc, 0x5c, 0x17, 0x4f, 0x3d, 0x8b, 0x81, 0x6c, 0x2e,
	0x39, 0xa5, 0x70, 0x8d, 0xcd, 0xc5, 0x50, 0x99, 0xd4, 0x61, 0xf7, 0x90, 0x26, 0x3c, 0xff, 0xec,
	0x8c, 0x0f, 0x53, 0x9e, 0x2d, 0xad, 0x32, 0xdb, 0x40, 0x50, 0x95, 0x18, 0x8e, 0x2d, 0x98, 0x26,
	0x3c, 0x4e, 0xbd, 0x60, 0x24, 0x06, 0x5a, 0x66, 0x4a, 0x06, 0xe8, 0x23, 0xfa, 0x3a, 0x94, 0x05,
	0xd1, 0x94, 0x45, 0x14, 0x90, 0x51, 0x58, 0xf4, 0x8a, 0x09, 0x9c, 0x7e, 0x0b, 0xaa, 0x5c, 0xd4,
	0x2b, 0x86, 0xba, 0xa4, 0xe6, 0xd5, 0x56, 0x30, 0x69, 0xd2, 0x7e, 0x07, 0x36, 0x44, 0x0d, 0xcf,
	0xfc, 0x78, 0x1a, 0x4c, 0xc7, 0x62, 0xa3, 0x47, 0xa3, 0xec, 0xed, 0x35, 0x98, 0x38, 0x63, 0x0b,
	0x26, 0x3c, 0x49, 0xfc, 0x31, 0x97, 0x1b, 0x36, 0x17, 0xdb, 0xff, 0x2c, 0x41, 0xdd, 0x49, 0x63,
	0xee, 0x4f, 0x44, 0xf7, 0xe8, 0x3b, 0x00, 0x49, 0xea, 0xa7, 0x7c, 0xc2, 0xa7, 0x69, 0xde, 0x86,
	0x3b, 0x32, 0xfc, 0x8a, 0xdd, 0x81, 0x93, 0x1b, 0xb1, 0x15, 0xfb, 0xff, 0x1e, 0x4f, 0xf1, 0x7f,
	0x18, 0xcf, 0xce, 0xa7, 0x45, 0xa8, 0x2d, 0xbc, 0x51, 0x15, 0x94, 0xa1, 0x9f, 0xf2, 0x71, 0x14,
	0xcf, 0xe5, 0x2e, 0x7e, 0xeb, 0x8b, 0xa2, 0x1f, 0x74, 0xa5, 0x31, 0x5b, 0x5c, 0xa3, 0xaf, 0x01,
	0x88, 0xaf, 0x25, 0x7b, 0xfa, 0x59, 0xbd, 0x35, 0x81, 0x88, 0xc7, 0xff, 0x08, 0xe8, 0x2c, 0x0e,
	0x26, 0x7e, 0x3c, 0xf7, 0x2e, 0xf8, 0x3c, 0x5f, 0x22, 0xa5, 0x1b, 0x06, 0x4e, 0xa4, 0xdd, 0x13,
	0x3e, 0x97, 0xb4, 0xf7, 0xf0, 0xfa, 0x5d, 0xf9, 0x64, 0x3f, 0x3b, 0xc6, 0x95, 0x9b, 0xe2, 0x97,
	0x40, 0x92, 0xef, 0xfc, 0x8a, 0x78, 0xdd, 0x78, 0x6c, 0x7f, 0x03, 0x94, 0x3c, 0x79, 0x5a, 0x83,
	0x8a, 0x16, 0xc7, 0x51, 0x4c, 0xd6, 0x04, 0xfb, 0xf5, 0x8d, 0x8c, 0x40, 0x7b, 0x3d, 0x24, 0xd0,
	0x11, 0x6c, 0x66, 0x83, 0x7f, 0x16, 0xa4, 0xe7, 0xc2, 0x8c, 0xbe, 0x05, 0x15, 0x8e, 0x07, 0xf9,
	0x01, 0x6c, 0xe6, 0xa1, 0xed, 0xae, 0xd0, 0xb3, 0x4c, 0x4b, 0xf7, 0xa1, 0x1a, 0x8b, 0x9b, 0x72,
	0x12, 0x54, 0xda, 0xad, 0xbc, 0x79, 0x26, 0x2d, 0xf6, 0x7f, 0x5f, 0x82, 0x5a, 0x7f, 0xee, 0xbc,
	0x08, 0x8f, 0x42, 0x7f, 0x2c, 0x12, 0xea, 0xdb, 0xee, 0x29, 0x59, 0x43, 0xaa, 0x37, 0x2d, 0xd7,
	0x33, 0x07, 0x86, 0xe1, 0x1d, 0x19, 0xea, 0x31, 0x29, 0x20, 0x67, 0xda, 0x4c, 0xf7, 0x9e, 0x68,
	0xa7, 0x19, 0x52, 0x44, 0x12, 0x1e, 0x98, 0xfa, 0xd3, 0x81, 0xb6, 0x04, 0xcb, 0xf4, 0x36, 0x6c,
	0xf5, 0x07, 0x86, 0xab, 0xdb, 0xc6, 0x0a, 0xac, 0xe0, 0xa2, 0x38, 0x34, 0xac, 0xc3, 0x4c, 0x24,
	0xe8, 0x7f, 0x60, 0x3a, 0xfa, 0xb1, 0xa9, 0xf5, 0x32, 0x68, 0x17, 0xa1, 0x0f, 0x34, 0x66, 0x1d,
	0xe9, 0x79, 0xc8, 0xc7, 0x94, 0x40, 0xfd, 0x50, 0x37, 0x55, 0x26, 0xbd, 0x5c, 0x15, 0x68, 0x13,
	0x6a, 0x9a, 0x39, 0xe8, 0x4b, 0xb9, 0x48, 0x5b, 0xb0, 0x8d, 0x9c, 0xec, 0xe9, 0x66, 0x97, 0x69,
	0x7d, 0xa4, 0xee, 0x4c, 0x53, 0xa6, 0xdb, 0xd0, 0x74, 0xf5, 0xbe, 0xe6, 0xb8, 0x6a, 0xdf, 0x96,
	0x20, 0x66, 0xa1, 0x38, 0x5a, 0x6e, 0x43, 0xe8, 0x0e, 0xdc, 0x36, 0x2d, 0x4f, 0x6e, 0x15, 0xef,
	0x44, 0x35, 0x06, 0x9a, 0xd4, 0xed, 0xd2, 0x2f, 0x03, 0xb5, 0x4c, 0x6f, 0x60, 0xf7, 0x54, 0x57,
	0xf3, 0x4c, 0xeb, 0x99, 0x54, 0x3c, 0xa6, 0x4d, 0x50, 0x96, 0x19, 0x5c, 0x61, 0x17, 0x1a, 0xb6,
	0xca, 0xdc, 0x65, 0xb1, 0x57, 0x57, 0xd8, 0x2c, 0x38, 0x66, 0xd6, 0xc0, 0x5e, 0x9a, 0x6d, 0xe1,
	0x16, 0x14, 0xcd, 0x92, 0x50, 0x19, 0xa1, 0x43, 0xdd, 0xec, 0x2e, 0xf2, 0xbb, 0x52, 0x76, 0x8a,
	0xa4, 0xb0, 0x7f, 0x01, 0x65, 0x31, 0x0e, 0x05, 0xca, 0xa6, 0x65, 0xe2, 0x96, 0xdd, 0x04, 0xd0,
	0x1d, 0xdd, 0x74, 0xb5, 0x63, 0xa6, 0x1a, 0x58, 0xb6, 0x00, 0xf2, 0x06, 0x62, 0xb5, 0x1b, 0xb0,
	0xae, 0x3b, 0x47, 0x86, 0xa5, 0xba, 0xb2, 0x4c, 0xdd, 0x79, 0x3a, 0xb0, 0x70, 0xd9, 0x5d, 0x11,
	0x5a, 0x87, 0x2a, 0xee, 0xb5, 0xf7, 0x5d, 0xac, 0x4b, 0xe8, 0xb2, 0xae, 0x92, 0xab, 0xc7, 0xfb,
	0x9f, 0x94, 0xa0, 0x8c, 0xeb, 0x08, 0x07, 0x24, 0xa6, 0x8d, 0xeb, 0x9c, 0xac, 0xd1, 0x1a, 0x94,
	0x75, 0xd3, 0x7d, 0x48, 0xbe, 0x57, 0xa4, 0x00, 0x95, 0x81, 0x38, 0x7f, 0xbf, 0x8a, 0x67, 0xdd,
	0x74, 0xdf, 0x7e, 0x40, 0x7e, 0x50, 0x44, 0xb7, 0x83, 0x4c, 0xf8, 0x61, 0xae, 0xe8, 0xdc, 0x27,
	0x3f, 0x5a, 0x28, 0x3a, 0xf7, 0xc9, 0x8f, 0x73, 0xc5, 0xbd, 0x0e, 0xf9, 0xc9, 0x42, 0x71, 0xaf,
	0x43, 0x7e, 0x9a, 0x2b, 0x1e, 0xdc, 0x27, 0x3f, 0x5b, 0x28, 0x1e, 0xdc, 0x27, 0x3f, 0xaf, 0x62,
	0x2d, 0xa2, 0x92, 0x7b, 0x1d, 0xf2, 0x0b, 0x65, 0x21, 0x3d, 0xb8, 0x4f, 0x7e, 0xa9, 0xe0, 0xfc,
	0x17, 0x53, 0x25, 0xbf, 0x22, 0x98, 0x26, 0x0e, 0x88, 0xfc, 0x5a, 0x1c, 0x51, 0x45, 0x7e, 0x43,
	0xb0, 0x46, 0x44, 0x85, 0xf8, 0x5b, 0xa1, 0x39, 0xd5, 0x54, 0x46, 0x7e, 0x57, 0xcd, 0x7e, 0x44,
	0x74, 0xf5, 0xbe, 0x6a, 0x10, 0x2a, 0x6e, 0x60, 0x57, 0xfe, 0x70, 0x17, 0x8f, 0xf8, 0x3c, 0xc9,
	0x1f, 0x6d, 0x0c, 0x78, 0xa2, 0xb2, 0xee, 0xbb, 0x2a, 0x23, 0x7f, 0xba, 0x8b, 0x01, 0x4f, 0x54,
	0x26, 0xfb, 0xf5, 0x67, 0x1b, 0x0d, 0x85, 0xea, 0xe3, 0xbb, 0x98, 0xb4, 0xc4, 0xff, 0x62, 0x53,
	0x05, 0x4a, 0x87, 0xba, 0x4b, 0x3e, 0x11, 0xd1, 0xf0, 0x89, 0x92, 0xbf, 0x12, 0x04, 0x1d, 0xcd,
	0x25, 0x7f, 0x43, 0xb0, 0xe2, 0x0e, 0x6c, 0x43, 0x23, 0x77, 0x30, 0xb9, 0x63, 0xcd, 0xea, 0x6b,
	0x2e, 0x3b, 0x25, 0x7f, 0x17, 0xe6, 0xef, 0x39, 0x96, 0x49, 0x3e, 0x25, 0xf8, 0x03, 0x43, 0x7b,
	0xdf, 0x66, 0x9a, 0xe3, 0xe8, 0x96, 0x49, 0xde, 0x78, 0x5e, 0x15, 0xff, 0xf4, 0xee, 0xfd, 0x27,
	0x00, 0x00, 0xff, 0xff, 0x1e, 0xbc, 0x59, 0x36, 0x0c, 0x0e, 0x00, 0x00,
}
